# Generated from SQLiteParser.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,193,2082,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,1,0,5,0,224,8,0,10,0,12,0,227,9,0,1,0,1,0,1,1,
        5,1,232,8,1,10,1,12,1,235,9,1,1,1,1,1,4,1,239,8,1,11,1,12,1,240,
        1,1,5,1,244,8,1,10,1,12,1,247,9,1,1,1,5,1,250,8,1,10,1,12,1,253,
        9,1,1,2,1,2,1,2,3,2,258,8,2,3,2,260,8,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,286,8,2,1,3,1,3,1,3,1,3,1,3,3,3,293,8,3,1,3,1,3,1,3,
        1,3,1,3,3,3,300,8,3,1,3,1,3,1,3,1,3,3,3,306,8,3,1,3,1,3,3,3,310,
        8,3,1,3,1,3,1,3,3,3,315,8,3,1,3,3,3,318,8,3,1,4,1,4,1,4,1,4,1,4,
        3,4,325,8,4,1,4,3,4,328,8,4,1,5,1,5,3,5,332,8,5,1,5,1,5,1,5,1,5,
        1,6,1,6,3,6,340,8,6,1,6,1,6,3,6,344,8,6,3,6,346,8,6,1,7,1,7,3,7,
        350,8,7,1,8,1,8,3,8,354,8,8,1,8,1,8,3,8,358,8,8,1,8,3,8,361,8,8,
        1,9,1,9,1,9,1,10,1,10,3,10,368,8,10,1,10,1,10,1,11,1,11,3,11,374,
        8,11,1,11,1,11,1,11,1,11,3,11,380,8,11,1,11,1,11,1,11,3,11,385,8,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,394,8,11,10,11,12,11,
        397,9,11,1,11,1,11,1,11,3,11,402,8,11,1,12,1,12,3,12,406,8,12,1,
        12,1,12,3,12,410,8,12,1,12,3,12,413,8,12,1,13,1,13,3,13,417,8,13,
        1,13,1,13,1,13,1,13,3,13,423,8,13,1,13,1,13,1,13,3,13,428,8,13,1,
        13,1,13,1,13,1,13,1,13,5,13,435,8,13,10,13,12,13,438,9,13,1,13,1,
        13,5,13,442,8,13,10,13,12,13,445,9,13,1,13,1,13,1,13,3,13,450,8,
        13,1,13,1,13,3,13,454,8,13,1,14,1,14,3,14,458,8,14,1,14,5,14,461,
        8,14,10,14,12,14,464,9,14,1,15,4,15,467,8,15,11,15,12,15,468,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,481,8,15,1,16,
        1,16,3,16,485,8,16,1,16,1,16,1,16,3,16,490,8,16,1,16,3,16,493,8,
        16,1,16,3,16,496,8,16,1,16,1,16,1,16,3,16,501,8,16,1,16,3,16,504,
        8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        3,16,518,8,16,1,16,1,16,1,16,1,16,1,16,3,16,525,8,16,1,16,1,16,1,
        16,1,16,1,16,3,16,532,8,16,3,16,534,8,16,1,17,3,17,537,8,17,1,17,
        1,17,1,18,1,18,3,18,543,8,18,1,18,1,18,1,18,3,18,548,8,18,1,18,1,
        18,1,18,1,18,5,18,554,8,18,10,18,12,18,557,9,18,1,18,1,18,3,18,561,
        8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,
        574,8,18,10,18,12,18,577,9,18,1,18,1,18,1,18,3,18,582,8,18,1,19,
        1,19,1,19,1,19,1,19,1,19,5,19,590,8,19,10,19,12,19,593,9,19,1,19,
        1,19,3,19,597,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,
        607,8,19,1,19,1,19,5,19,611,8,19,10,19,12,19,614,9,19,1,19,3,19,
        617,8,19,1,19,1,19,1,19,3,19,622,8,19,3,19,624,8,19,1,20,1,20,1,
        20,1,20,1,21,1,21,3,21,632,8,21,1,21,1,21,1,21,1,21,3,21,638,8,21,
        1,21,1,21,1,21,3,21,643,8,21,1,21,1,21,1,21,1,21,1,21,3,21,650,8,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,659,8,21,10,21,12,21,
        662,9,21,3,21,664,8,21,3,21,666,8,21,1,21,1,21,1,21,1,21,1,21,3,
        21,673,8,21,1,21,1,21,3,21,677,8,21,1,21,1,21,1,21,1,21,1,21,3,21,
        684,8,21,1,21,1,21,4,21,688,8,21,11,21,12,21,689,1,21,1,21,1,22,
        1,22,3,22,696,8,22,1,22,1,22,1,22,1,22,3,22,702,8,22,1,22,1,22,1,
        22,3,22,707,8,22,1,22,1,22,1,22,1,22,1,22,5,22,714,8,22,10,22,12,
        22,717,9,22,1,22,1,22,3,22,721,8,22,1,22,1,22,1,22,1,23,1,23,1,23,
        1,23,1,23,1,23,3,23,732,8,23,1,23,1,23,1,23,3,23,737,8,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,5,23,746,8,23,10,23,12,23,749,9,23,1,
        23,1,23,3,23,753,8,23,1,24,1,24,3,24,757,8,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,771,8,24,10,24,12,24,
        774,9,24,1,25,1,25,1,25,1,25,1,25,5,25,781,8,25,10,25,12,25,784,
        9,25,1,25,1,25,3,25,788,8,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,
        796,8,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,5,27,806,8,27,10,
        27,12,27,809,9,27,1,27,1,27,3,27,813,8,27,1,27,1,27,1,27,1,27,1,
        27,1,28,3,28,821,8,28,1,28,1,28,1,28,1,28,1,28,3,28,828,8,28,1,28,
        3,28,831,8,28,1,29,3,29,834,8,29,1,29,1,29,1,29,1,29,1,29,3,29,841,
        8,29,1,29,3,29,844,8,29,1,29,3,29,847,8,29,1,29,3,29,850,8,29,1,
        30,1,30,3,30,854,8,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,862,8,31,
        1,31,1,31,1,31,3,31,867,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
        1,32,3,32,877,8,32,1,32,1,32,1,32,3,32,882,8,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,3,32,891,8,32,1,32,1,32,1,32,5,32,896,8,32,10,
        32,12,32,899,9,32,1,32,3,32,902,8,32,1,32,1,32,3,32,906,8,32,1,32,
        3,32,909,8,32,1,32,1,32,1,32,1,32,5,32,915,8,32,10,32,12,32,918,
        9,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,930,
        8,32,1,32,3,32,933,8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,941,8,
        32,1,32,1,32,1,32,1,32,1,32,4,32,948,8,32,11,32,12,32,949,1,32,1,
        32,3,32,954,8,32,1,32,1,32,1,32,3,32,959,8,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,989,
        8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1001,
        8,32,1,32,1,32,1,32,3,32,1006,8,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,3,32,1018,8,32,1,32,1,32,1,32,1,32,3,32,1024,
        8,32,1,32,1,32,1,32,1,32,1,32,3,32,1031,8,32,1,32,1,32,3,32,1035,
        8,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,1043,8,32,10,32,12,32,1046,
        9,32,3,32,1048,8,32,1,32,1,32,1,32,1,32,3,32,1054,8,32,1,32,1,32,
        1,32,1,32,3,32,1060,8,32,1,32,1,32,1,32,1,32,1,32,5,32,1067,8,32,
        10,32,12,32,1070,9,32,3,32,1072,8,32,1,32,1,32,3,32,1076,8,32,5,
        32,1078,8,32,10,32,12,32,1081,9,32,1,33,1,33,1,33,1,33,1,33,1,33,
        3,33,1089,8,33,1,33,1,33,1,34,1,34,1,35,3,35,1096,8,35,1,35,1,35,
        1,35,1,35,1,35,3,35,1103,8,35,1,35,1,35,1,35,1,35,3,35,1109,8,35,
        1,35,1,35,1,35,3,35,1114,8,35,1,35,1,35,1,35,1,35,5,35,1120,8,35,
        10,35,12,35,1123,9,35,1,35,1,35,3,35,1127,8,35,1,35,1,35,1,35,1,
        35,1,35,5,35,1134,8,35,10,35,12,35,1137,9,35,1,35,1,35,1,35,1,35,
        1,35,1,35,5,35,1145,8,35,10,35,12,35,1148,9,35,1,35,1,35,5,35,1152,
        8,35,10,35,12,35,1155,9,35,1,35,3,35,1158,8,35,1,35,3,35,1161,8,
        35,1,35,1,35,3,35,1165,8,35,1,35,3,35,1168,8,35,1,36,1,36,1,36,1,
        36,5,36,1174,8,36,10,36,12,36,1177,9,36,1,37,1,37,1,37,1,37,1,37,
        1,37,5,37,1185,8,37,10,37,12,37,1188,9,37,1,37,1,37,1,37,3,37,1193,
        8,37,3,37,1195,8,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1203,8,37,
        1,37,1,37,1,37,1,37,1,37,3,37,1210,8,37,1,37,1,37,1,37,5,37,1215,
        8,37,10,37,12,37,1218,9,37,1,37,1,37,3,37,1222,8,37,3,37,1224,8,
        37,1,38,1,38,1,38,1,38,3,38,1230,8,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,3,38,1239,8,38,1,39,1,39,1,39,3,39,1244,8,39,1,40,1,40,1,
        40,1,40,1,40,3,40,1251,8,40,1,40,1,40,3,40,1255,8,40,3,40,1257,8,
        40,1,41,3,41,1260,8,41,1,41,1,41,1,41,1,41,5,41,1266,8,41,10,41,
        12,41,1269,9,41,1,41,3,41,1272,8,41,1,41,3,41,1275,8,41,1,42,1,42,
        1,42,1,42,3,42,1281,8,42,5,42,1283,8,42,10,42,12,42,1286,9,42,1,
        43,1,43,3,43,1290,8,43,1,43,1,43,1,43,5,43,1295,8,43,10,43,12,43,
        1298,9,43,1,43,1,43,1,43,1,43,5,43,1304,8,43,10,43,12,43,1307,9,
        43,1,43,3,43,1310,8,43,3,43,1312,8,43,1,43,1,43,3,43,1316,8,43,1,
        43,1,43,1,43,1,43,1,43,5,43,1323,8,43,10,43,12,43,1326,9,43,1,43,
        1,43,3,43,1330,8,43,3,43,1332,8,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,5,43,1343,8,43,10,43,12,43,1346,9,43,3,43,1348,8,
        43,1,43,1,43,1,43,1,43,1,43,5,43,1355,8,43,10,43,12,43,1358,9,43,
        1,43,1,43,1,43,1,43,1,43,1,43,5,43,1366,8,43,10,43,12,43,1369,9,
        43,1,43,1,43,5,43,1373,8,43,10,43,12,43,1376,9,43,3,43,1378,8,43,
        1,44,1,44,1,45,3,45,1383,8,45,1,45,1,45,3,45,1387,8,45,1,45,3,45,
        1390,8,45,1,46,3,46,1393,8,46,1,46,1,46,1,46,3,46,1398,8,46,1,46,
        1,46,3,46,1402,8,46,1,46,4,46,1405,8,46,11,46,12,46,1406,1,46,3,
        46,1410,8,46,1,46,3,46,1413,8,46,1,47,1,47,1,47,3,47,1418,8,47,1,
        47,1,47,3,47,1422,8,47,1,47,3,47,1425,8,47,1,47,1,47,1,47,1,47,1,
        47,3,47,1432,8,47,1,47,1,47,1,47,3,47,1437,8,47,1,47,1,47,1,47,1,
        47,1,47,5,47,1444,8,47,10,47,12,47,1447,9,47,1,47,1,47,3,47,1451,
        8,47,1,47,3,47,1454,8,47,1,47,1,47,1,47,1,47,5,47,1460,8,47,10,47,
        12,47,1463,9,47,1,47,3,47,1466,8,47,1,47,1,47,1,47,1,47,1,47,1,47,
        3,47,1474,8,47,1,47,3,47,1477,8,47,3,47,1479,8,47,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,3,48,1488,8,48,1,48,3,48,1491,8,48,3,48,1493,
        8,48,1,49,1,49,3,49,1497,8,49,1,49,1,49,3,49,1501,8,49,1,49,1,49,
        3,49,1505,8,49,1,49,3,49,1508,8,49,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,5,50,1517,8,50,10,50,12,50,1520,9,50,1,50,1,50,3,50,1524,8,
        50,1,51,1,51,3,51,1528,8,51,1,51,1,51,3,51,1532,8,51,1,52,3,52,1535,
        8,52,1,52,1,52,1,52,3,52,1540,8,52,1,52,1,52,1,52,1,52,3,52,1546,
        8,52,1,52,1,52,1,52,1,52,1,52,3,52,1553,8,52,1,52,1,52,1,52,5,52,
        1558,8,52,10,52,12,52,1561,9,52,1,52,1,52,1,52,1,52,5,52,1567,8,
        52,10,52,12,52,1570,9,52,1,52,3,52,1573,8,52,3,52,1575,8,52,1,52,
        1,52,3,52,1579,8,52,1,52,3,52,1582,8,52,1,53,1,53,1,53,1,53,5,53,
        1588,8,53,10,53,12,53,1591,9,53,1,53,1,53,1,54,3,54,1596,8,54,1,
        54,1,54,1,54,3,54,1601,8,54,1,54,1,54,1,54,1,54,3,54,1607,8,54,1,
        54,1,54,1,54,1,54,1,54,3,54,1614,8,54,1,54,1,54,1,54,5,54,1619,8,
        54,10,54,12,54,1622,9,54,1,54,1,54,3,54,1626,8,54,1,54,3,54,1629,
        8,54,1,54,3,54,1632,8,54,1,54,3,54,1635,8,54,1,55,1,55,1,55,3,55,
        1640,8,55,1,55,1,55,1,55,3,55,1645,8,55,1,55,1,55,1,55,1,55,1,55,
        3,55,1652,8,55,1,56,1,56,3,56,1656,8,56,1,56,1,56,3,56,1660,8,56,
        1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,3,58,1670,8,58,1,58,1,58,
        1,58,1,58,1,58,5,58,1677,8,58,10,58,12,58,1680,9,58,3,58,1682,8,
        58,1,58,1,58,1,58,1,58,1,58,5,58,1689,8,58,10,58,12,58,1692,9,58,
        1,58,3,58,1695,8,58,1,58,1,58,1,59,1,59,1,59,1,59,3,59,1703,8,59,
        1,59,1,59,1,59,1,59,1,59,5,59,1710,8,59,10,59,12,59,1713,9,59,3,
        59,1715,8,59,1,59,1,59,1,59,1,59,1,59,5,59,1722,8,59,10,59,12,59,
        1725,9,59,3,59,1727,8,59,1,59,3,59,1730,8,59,1,59,3,59,1733,8,59,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1743,8,60,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,3,61,1752,8,61,1,62,1,62,1,62,1,62,1,62,
        5,62,1759,8,62,10,62,12,62,1762,9,62,1,62,3,62,1765,8,62,1,62,1,
        62,1,63,1,63,1,63,3,63,1772,8,63,1,63,1,63,1,63,5,63,1777,8,63,10,
        63,12,63,1780,9,63,1,63,3,63,1783,8,63,1,63,1,63,3,63,1787,8,63,
        1,64,1,64,1,64,1,64,1,64,5,64,1794,8,64,10,64,12,64,1797,9,64,1,
        64,3,64,1800,8,64,1,64,1,64,3,64,1804,8,64,1,64,1,64,1,64,3,64,1809,
        8,64,1,65,1,65,3,65,1813,8,65,1,65,1,65,1,65,5,65,1818,8,65,10,65,
        12,65,1821,9,65,1,66,1,66,1,66,1,66,1,66,5,66,1828,8,66,10,66,12,
        66,1831,9,66,1,67,1,67,1,67,1,67,3,67,1837,8,67,1,68,1,68,1,68,3,
        68,1842,8,68,1,68,3,68,1845,8,68,1,68,1,68,3,68,1849,8,68,1,69,1,
        69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1863,8,
        70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1875,8,
        71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1884,8,72,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,3,73,1893,8,73,1,73,1,73,3,73,1897,8,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1907,8,73,1,73,3,73,1910,
        8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1919,8,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,3,73,1928,8,73,1,73,3,73,1931,8,73,1,73,
        1,73,1,73,1,73,3,73,1937,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,3,73,1951,8,73,1,73,1,73,3,73,1955,8,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1966,8,73,1,73,
        1,73,1,73,3,73,1971,8,73,1,74,1,74,1,74,1,75,1,75,1,75,1,76,1,76,
        1,76,4,76,1982,8,76,11,76,12,76,1983,1,77,1,77,1,77,4,77,1989,8,
        77,11,77,12,77,1990,1,78,1,78,1,78,1,78,1,79,1,79,3,79,1999,8,79,
        1,79,1,79,1,79,3,79,2004,8,79,5,79,2006,8,79,10,79,12,79,2009,9,
        79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,3,84,2021,8,
        84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,89,1,90,1,90,1,
        91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,
        97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,102,1,102,1,103,
        1,103,1,104,1,104,1,105,1,105,1,106,1,106,1,107,1,107,1,108,1,108,
        1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,2080,
        8,110,1,110,2,436,468,1,64,111,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
        174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
        206,208,210,212,214,216,218,220,0,28,3,0,58,58,69,69,82,82,2,0,47,
        47,66,66,1,0,133,134,2,0,146,146,171,171,1,0,8,9,2,0,59,59,141,141,
        2,0,56,56,104,104,2,0,58,58,82,82,5,0,25,25,72,72,81,81,122,122,
        126,126,4,0,84,84,132,132,138,138,145,145,2,0,7,7,12,13,1,0,14,17,
        1,0,18,21,4,0,77,77,97,97,99,99,118,118,3,0,25,25,72,72,126,126,
        5,0,52,54,104,104,172,173,186,186,188,189,2,0,29,29,62,62,3,0,128,
        128,154,154,179,179,2,0,5,5,106,106,1,0,176,177,2,0,34,34,60,60,
        2,0,151,151,162,162,2,0,159,159,166,166,2,0,160,160,167,168,2,0,
        161,161,163,163,2,0,8,10,102,102,2,0,185,185,188,188,2,0,25,123,
        125,180,2369,0,225,1,0,0,0,2,233,1,0,0,0,4,259,1,0,0,0,6,287,1,0,
        0,0,8,319,1,0,0,0,10,329,1,0,0,0,12,337,1,0,0,0,14,347,1,0,0,0,16,
        351,1,0,0,0,18,362,1,0,0,0,20,365,1,0,0,0,22,371,1,0,0,0,24,405,
        1,0,0,0,26,414,1,0,0,0,28,455,1,0,0,0,30,466,1,0,0,0,32,484,1,0,
        0,0,34,536,1,0,0,0,36,542,1,0,0,0,38,583,1,0,0,0,40,625,1,0,0,0,
        42,629,1,0,0,0,44,693,1,0,0,0,46,725,1,0,0,0,48,754,1,0,0,0,50,775,
        1,0,0,0,52,789,1,0,0,0,54,800,1,0,0,0,56,820,1,0,0,0,58,833,1,0,
        0,0,60,851,1,0,0,0,62,857,1,0,0,0,64,958,1,0,0,0,66,1082,1,0,0,0,
        68,1092,1,0,0,0,70,1095,1,0,0,0,72,1169,1,0,0,0,74,1178,1,0,0,0,
        76,1225,1,0,0,0,78,1243,1,0,0,0,80,1245,1,0,0,0,82,1259,1,0,0,0,
        84,1276,1,0,0,0,86,1377,1,0,0,0,88,1379,1,0,0,0,90,1382,1,0,0,0,
        92,1392,1,0,0,0,94,1478,1,0,0,0,96,1492,1,0,0,0,98,1507,1,0,0,0,
        100,1523,1,0,0,0,102,1531,1,0,0,0,104,1534,1,0,0,0,106,1583,1,0,
        0,0,108,1595,1,0,0,0,110,1639,1,0,0,0,112,1653,1,0,0,0,114,1661,
        1,0,0,0,116,1667,1,0,0,0,118,1698,1,0,0,0,120,1734,1,0,0,0,122,1744,
        1,0,0,0,124,1753,1,0,0,0,126,1768,1,0,0,0,128,1788,1,0,0,0,130,1810,
        1,0,0,0,132,1822,1,0,0,0,134,1832,1,0,0,0,136,1838,1,0,0,0,138,1850,
        1,0,0,0,140,1862,1,0,0,0,142,1874,1,0,0,0,144,1883,1,0,0,0,146,1970,
        1,0,0,0,148,1972,1,0,0,0,150,1975,1,0,0,0,152,1978,1,0,0,0,154,1985,
        1,0,0,0,156,1992,1,0,0,0,158,1996,1,0,0,0,160,2010,1,0,0,0,162,2012,
        1,0,0,0,164,2014,1,0,0,0,166,2016,1,0,0,0,168,2020,1,0,0,0,170,2022,
        1,0,0,0,172,2024,1,0,0,0,174,2026,1,0,0,0,176,2028,1,0,0,0,178,2030,
        1,0,0,0,180,2032,1,0,0,0,182,2034,1,0,0,0,184,2036,1,0,0,0,186,2038,
        1,0,0,0,188,2040,1,0,0,0,190,2042,1,0,0,0,192,2044,1,0,0,0,194,2046,
        1,0,0,0,196,2048,1,0,0,0,198,2050,1,0,0,0,200,2052,1,0,0,0,202,2054,
        1,0,0,0,204,2056,1,0,0,0,206,2058,1,0,0,0,208,2060,1,0,0,0,210,2062,
        1,0,0,0,212,2064,1,0,0,0,214,2066,1,0,0,0,216,2068,1,0,0,0,218,2070,
        1,0,0,0,220,2079,1,0,0,0,222,224,3,2,1,0,223,222,1,0,0,0,224,227,
        1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,225,
        1,0,0,0,228,229,5,0,0,1,229,1,1,0,0,0,230,232,5,1,0,0,231,230,1,
        0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,
        0,0,0,235,233,1,0,0,0,236,245,3,4,2,0,237,239,5,1,0,0,238,237,1,
        0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,242,1,
        0,0,0,242,244,3,4,2,0,243,238,1,0,0,0,244,247,1,0,0,0,245,243,1,
        0,0,0,245,246,1,0,0,0,246,251,1,0,0,0,247,245,1,0,0,0,248,250,5,
        1,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,
        0,0,0,252,3,1,0,0,0,253,251,1,0,0,0,254,257,5,71,0,0,255,256,5,114,
        0,0,256,258,5,111,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,260,1,
        0,0,0,259,254,1,0,0,0,259,260,1,0,0,0,260,285,1,0,0,0,261,286,3,
        6,3,0,262,286,3,8,4,0,263,286,3,10,5,0,264,286,3,12,6,0,265,286,
        3,14,7,0,266,286,3,22,11,0,267,286,3,26,13,0,268,286,3,42,21,0,269,
        286,3,44,22,0,270,286,3,46,23,0,271,286,3,56,28,0,272,286,3,58,29,
        0,273,286,3,60,30,0,274,286,3,62,31,0,275,286,3,70,35,0,276,286,
        3,76,38,0,277,286,3,80,40,0,278,286,3,20,10,0,279,286,3,16,8,0,280,
        286,3,18,9,0,281,286,3,82,41,0,282,286,3,104,52,0,283,286,3,108,
        54,0,284,286,3,112,56,0,285,261,1,0,0,0,285,262,1,0,0,0,285,263,
        1,0,0,0,285,264,1,0,0,0,285,265,1,0,0,0,285,266,1,0,0,0,285,267,
        1,0,0,0,285,268,1,0,0,0,285,269,1,0,0,0,285,270,1,0,0,0,285,271,
        1,0,0,0,285,272,1,0,0,0,285,273,1,0,0,0,285,274,1,0,0,0,285,275,
        1,0,0,0,285,276,1,0,0,0,285,277,1,0,0,0,285,278,1,0,0,0,285,279,
        1,0,0,0,285,280,1,0,0,0,285,281,1,0,0,0,285,282,1,0,0,0,285,283,
        1,0,0,0,285,284,1,0,0,0,286,5,1,0,0,0,287,288,5,30,0,0,288,292,5,
        132,0,0,289,290,3,178,89,0,290,291,5,2,0,0,291,293,1,0,0,0,292,289,
        1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,317,3,180,90,0,295,305,
        5,121,0,0,296,297,5,136,0,0,297,306,3,180,90,0,298,300,5,46,0,0,
        299,298,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,302,3,184,92,
        0,302,303,5,136,0,0,303,304,3,184,92,0,304,306,1,0,0,0,305,296,1,
        0,0,0,305,299,1,0,0,0,306,318,1,0,0,0,307,309,5,27,0,0,308,310,5,
        46,0,0,309,308,1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,0,311,318,3,
        28,14,0,312,314,5,63,0,0,313,315,5,46,0,0,314,313,1,0,0,0,314,315,
        1,0,0,0,315,316,1,0,0,0,316,318,3,184,92,0,317,295,1,0,0,0,317,307,
        1,0,0,0,317,312,1,0,0,0,318,7,1,0,0,0,319,327,5,31,0,0,320,328,3,
        178,89,0,321,322,3,178,89,0,322,323,5,2,0,0,323,325,1,0,0,0,324,
        321,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,328,3,182,91,0,327,
        320,1,0,0,0,327,324,1,0,0,0,327,328,1,0,0,0,328,9,1,0,0,0,329,331,
        5,35,0,0,330,332,5,55,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,
        1,0,0,0,333,334,3,64,32,0,334,335,5,33,0,0,335,336,3,178,89,0,336,
        11,1,0,0,0,337,339,5,38,0,0,338,340,7,0,0,0,339,338,1,0,0,0,339,
        340,1,0,0,0,340,345,1,0,0,0,341,343,5,137,0,0,342,344,3,204,102,
        0,343,342,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,341,1,0,0,
        0,345,346,1,0,0,0,346,13,1,0,0,0,347,349,7,1,0,0,348,350,5,137,0,
        0,349,348,1,0,0,0,349,350,1,0,0,0,350,15,1,0,0,0,351,353,5,126,0,
        0,352,354,5,137,0,0,353,352,1,0,0,0,353,354,1,0,0,0,354,360,1,0,
        0,0,355,357,5,136,0,0,356,358,5,129,0,0,357,356,1,0,0,0,357,358,
        1,0,0,0,358,359,1,0,0,0,359,361,3,200,100,0,360,355,1,0,0,0,360,
        361,1,0,0,0,361,17,1,0,0,0,362,363,5,129,0,0,363,364,3,200,100,0,
        364,19,1,0,0,0,365,367,5,120,0,0,366,368,5,129,0,0,367,366,1,0,0,
        0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,3,200,100,0,370,21,1,0,
        0,0,371,373,5,50,0,0,372,374,5,140,0,0,373,372,1,0,0,0,373,374,1,
        0,0,0,374,375,1,0,0,0,375,379,5,84,0,0,376,377,5,80,0,0,377,378,
        5,102,0,0,378,380,5,70,0,0,379,376,1,0,0,0,379,380,1,0,0,0,380,384,
        1,0,0,0,381,382,3,178,89,0,382,383,5,2,0,0,383,385,1,0,0,0,384,381,
        1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,387,3,190,95,0,387,388,
        5,107,0,0,388,389,3,180,90,0,389,390,5,3,0,0,390,395,3,24,12,0,391,
        392,5,5,0,0,392,394,3,24,12,0,393,391,1,0,0,0,394,397,1,0,0,0,395,
        393,1,0,0,0,395,396,1,0,0,0,396,398,1,0,0,0,397,395,1,0,0,0,398,
        401,5,4,0,0,399,400,5,148,0,0,400,402,3,64,32,0,401,399,1,0,0,0,
        401,402,1,0,0,0,402,23,1,0,0,0,403,406,3,184,92,0,404,406,3,64,32,
        0,405,403,1,0,0,0,405,404,1,0,0,0,406,409,1,0,0,0,407,408,5,45,0,
        0,408,410,3,186,93,0,409,407,1,0,0,0,409,410,1,0,0,0,410,412,1,0,
        0,0,411,413,3,138,69,0,412,411,1,0,0,0,412,413,1,0,0,0,413,25,1,
        0,0,0,414,416,5,50,0,0,415,417,7,2,0,0,416,415,1,0,0,0,416,417,1,
        0,0,0,417,418,1,0,0,0,418,422,5,132,0,0,419,420,5,80,0,0,420,421,
        5,102,0,0,421,423,5,70,0,0,422,419,1,0,0,0,422,423,1,0,0,0,423,427,
        1,0,0,0,424,425,3,178,89,0,425,426,5,2,0,0,426,428,1,0,0,0,427,424,
        1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,453,3,180,90,0,430,431,
        5,3,0,0,431,436,3,28,14,0,432,433,5,5,0,0,433,435,3,28,14,0,434,
        432,1,0,0,0,435,438,1,0,0,0,436,437,1,0,0,0,436,434,1,0,0,0,437,
        443,1,0,0,0,438,436,1,0,0,0,439,440,5,5,0,0,440,442,3,36,18,0,441,
        439,1,0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,
        446,1,0,0,0,445,443,1,0,0,0,446,449,5,4,0,0,447,448,5,150,0,0,448,
        450,5,185,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,454,1,0,0,0,451,
        452,5,33,0,0,452,454,3,82,41,0,453,430,1,0,0,0,453,451,1,0,0,0,454,
        27,1,0,0,0,455,457,3,184,92,0,456,458,3,30,15,0,457,456,1,0,0,0,
        457,458,1,0,0,0,458,462,1,0,0,0,459,461,3,32,16,0,460,459,1,0,0,
        0,461,464,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,29,1,0,0,0,
        464,462,1,0,0,0,465,467,3,174,87,0,466,465,1,0,0,0,467,468,1,0,0,
        0,468,469,1,0,0,0,468,466,1,0,0,0,469,480,1,0,0,0,470,471,5,3,0,
        0,471,472,3,34,17,0,472,473,5,4,0,0,473,481,1,0,0,0,474,475,5,3,
        0,0,475,476,3,34,17,0,476,477,5,5,0,0,477,478,3,34,17,0,478,479,
        5,4,0,0,479,481,1,0,0,0,480,470,1,0,0,0,480,474,1,0,0,0,480,481,
        1,0,0,0,481,31,1,0,0,0,482,483,5,49,0,0,483,485,3,174,87,0,484,482,
        1,0,0,0,484,485,1,0,0,0,485,533,1,0,0,0,486,487,5,113,0,0,487,489,
        5,95,0,0,488,490,3,138,69,0,489,488,1,0,0,0,489,490,1,0,0,0,490,
        492,1,0,0,0,491,493,3,40,20,0,492,491,1,0,0,0,492,493,1,0,0,0,493,
        495,1,0,0,0,494,496,5,36,0,0,495,494,1,0,0,0,495,496,1,0,0,0,496,
        534,1,0,0,0,497,498,5,102,0,0,498,501,5,104,0,0,499,501,5,140,0,
        0,500,497,1,0,0,0,500,499,1,0,0,0,501,503,1,0,0,0,502,504,3,40,20,
        0,503,502,1,0,0,0,503,504,1,0,0,0,504,534,1,0,0,0,505,506,5,44,0,
        0,506,507,5,3,0,0,507,508,3,64,32,0,508,509,5,4,0,0,509,534,1,0,
        0,0,510,517,5,56,0,0,511,518,3,34,17,0,512,518,3,68,34,0,513,514,
        5,3,0,0,514,515,3,64,32,0,515,516,5,4,0,0,516,518,1,0,0,0,517,511,
        1,0,0,0,517,512,1,0,0,0,517,513,1,0,0,0,518,534,1,0,0,0,519,520,
        5,45,0,0,520,534,3,186,93,0,521,534,3,38,19,0,522,523,5,169,0,0,
        523,525,5,170,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,
        0,526,527,5,33,0,0,527,528,5,3,0,0,528,529,3,64,32,0,529,531,5,4,
        0,0,530,532,7,3,0,0,531,530,1,0,0,0,531,532,1,0,0,0,532,534,1,0,
        0,0,533,486,1,0,0,0,533,500,1,0,0,0,533,505,1,0,0,0,533,510,1,0,
        0,0,533,519,1,0,0,0,533,521,1,0,0,0,533,524,1,0,0,0,534,33,1,0,0,
        0,535,537,7,4,0,0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,
        0,538,539,5,186,0,0,539,35,1,0,0,0,540,541,5,49,0,0,541,543,3,174,
        87,0,542,540,1,0,0,0,542,543,1,0,0,0,543,581,1,0,0,0,544,545,5,113,
        0,0,545,548,5,95,0,0,546,548,5,140,0,0,547,544,1,0,0,0,547,546,1,
        0,0,0,548,549,1,0,0,0,549,550,5,3,0,0,550,555,3,24,12,0,551,552,
        5,5,0,0,552,554,3,24,12,0,553,551,1,0,0,0,554,557,1,0,0,0,555,553,
        1,0,0,0,555,556,1,0,0,0,556,558,1,0,0,0,557,555,1,0,0,0,558,560,
        5,4,0,0,559,561,3,40,20,0,560,559,1,0,0,0,560,561,1,0,0,0,561,582,
        1,0,0,0,562,563,5,44,0,0,563,564,5,3,0,0,564,565,3,64,32,0,565,566,
        5,4,0,0,566,582,1,0,0,0,567,568,5,74,0,0,568,569,5,95,0,0,569,570,
        5,3,0,0,570,575,3,184,92,0,571,572,5,5,0,0,572,574,3,184,92,0,573,
        571,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,0,576,
        578,1,0,0,0,577,575,1,0,0,0,578,579,5,4,0,0,579,580,3,38,19,0,580,
        582,1,0,0,0,581,547,1,0,0,0,581,562,1,0,0,0,581,567,1,0,0,0,582,
        37,1,0,0,0,583,584,5,117,0,0,584,596,3,188,94,0,585,586,5,3,0,0,
        586,591,3,184,92,0,587,588,5,5,0,0,588,590,3,184,92,0,589,587,1,
        0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,594,1,
        0,0,0,593,591,1,0,0,0,594,595,5,4,0,0,595,597,1,0,0,0,596,585,1,
        0,0,0,596,597,1,0,0,0,597,612,1,0,0,0,598,599,5,107,0,0,599,606,
        7,5,0,0,600,601,5,131,0,0,601,607,7,6,0,0,602,607,5,41,0,0,603,607,
        5,123,0,0,604,605,5,101,0,0,605,607,5,26,0,0,606,600,1,0,0,0,606,
        602,1,0,0,0,606,603,1,0,0,0,606,604,1,0,0,0,607,611,1,0,0,0,608,
        609,5,99,0,0,609,611,3,174,87,0,610,598,1,0,0,0,610,608,1,0,0,0,
        611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,623,1,0,0,0,
        614,612,1,0,0,0,615,617,5,102,0,0,616,615,1,0,0,0,616,617,1,0,0,
        0,617,618,1,0,0,0,618,621,5,57,0,0,619,620,5,86,0,0,620,622,7,7,
        0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,616,1,0,
        0,0,623,624,1,0,0,0,624,39,1,0,0,0,625,626,5,107,0,0,626,627,5,48,
        0,0,627,628,7,8,0,0,628,41,1,0,0,0,629,631,5,50,0,0,630,632,7,2,
        0,0,631,630,1,0,0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,637,5,138,
        0,0,634,635,5,80,0,0,635,636,5,102,0,0,636,638,5,70,0,0,637,634,
        1,0,0,0,637,638,1,0,0,0,638,642,1,0,0,0,639,640,3,178,89,0,640,641,
        5,2,0,0,641,643,1,0,0,0,642,639,1,0,0,0,642,643,1,0,0,0,643,644,
        1,0,0,0,644,649,3,192,96,0,645,650,5,37,0,0,646,650,5,28,0,0,647,
        648,5,89,0,0,648,650,5,105,0,0,649,645,1,0,0,0,649,646,1,0,0,0,649,
        647,1,0,0,0,649,650,1,0,0,0,650,665,1,0,0,0,651,666,5,59,0,0,652,
        666,5,88,0,0,653,663,5,141,0,0,654,655,5,105,0,0,655,660,3,184,92,
        0,656,657,5,5,0,0,657,659,3,184,92,0,658,656,1,0,0,0,659,662,1,0,
        0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,664,1,0,0,0,662,660,1,0,
        0,0,663,654,1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,651,1,0,
        0,0,665,652,1,0,0,0,665,653,1,0,0,0,666,667,1,0,0,0,667,668,5,107,
        0,0,668,672,3,180,90,0,669,670,5,73,0,0,670,671,5,64,0,0,671,673,
        5,127,0,0,672,669,1,0,0,0,672,673,1,0,0,0,673,676,1,0,0,0,674,675,
        5,147,0,0,675,677,3,64,32,0,676,674,1,0,0,0,676,677,1,0,0,0,677,
        678,1,0,0,0,678,687,5,38,0,0,679,684,3,104,52,0,680,684,3,70,35,
        0,681,684,3,56,28,0,682,684,3,82,41,0,683,679,1,0,0,0,683,680,1,
        0,0,0,683,681,1,0,0,0,683,682,1,0,0,0,684,685,1,0,0,0,685,686,5,
        1,0,0,686,688,1,0,0,0,687,683,1,0,0,0,688,689,1,0,0,0,689,687,1,
        0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,692,5,66,0,0,692,43,1,
        0,0,0,693,695,5,50,0,0,694,696,7,2,0,0,695,694,1,0,0,0,695,696,1,
        0,0,0,696,697,1,0,0,0,697,701,5,145,0,0,698,699,5,80,0,0,699,700,
        5,102,0,0,700,702,5,70,0,0,701,698,1,0,0,0,701,702,1,0,0,0,702,706,
        1,0,0,0,703,704,3,178,89,0,704,705,5,2,0,0,705,707,1,0,0,0,706,703,
        1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,720,3,194,97,0,709,710,
        5,3,0,0,710,715,3,184,92,0,711,712,5,5,0,0,712,714,3,184,92,0,713,
        711,1,0,0,0,714,717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,
        718,1,0,0,0,717,715,1,0,0,0,718,719,5,4,0,0,719,721,1,0,0,0,720,
        709,1,0,0,0,720,721,1,0,0,0,721,722,1,0,0,0,722,723,5,33,0,0,723,
        724,3,82,41,0,724,45,1,0,0,0,725,726,5,50,0,0,726,727,5,146,0,0,
        727,731,5,132,0,0,728,729,5,80,0,0,729,730,5,102,0,0,730,732,5,70,
        0,0,731,728,1,0,0,0,731,732,1,0,0,0,732,736,1,0,0,0,733,734,3,178,
        89,0,734,735,5,2,0,0,735,737,1,0,0,0,736,733,1,0,0,0,736,737,1,0,
        0,0,737,738,1,0,0,0,738,739,3,180,90,0,739,740,5,142,0,0,740,752,
        3,196,98,0,741,742,5,3,0,0,742,747,3,168,84,0,743,744,5,5,0,0,744,
        746,3,168,84,0,745,743,1,0,0,0,746,749,1,0,0,0,747,745,1,0,0,0,747,
        748,1,0,0,0,748,750,1,0,0,0,749,747,1,0,0,0,750,751,5,4,0,0,751,
        753,1,0,0,0,752,741,1,0,0,0,752,753,1,0,0,0,753,47,1,0,0,0,754,756,
        5,149,0,0,755,757,5,116,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,
        758,1,0,0,0,758,759,3,50,25,0,759,760,5,33,0,0,760,761,5,3,0,0,761,
        762,3,82,41,0,762,772,5,4,0,0,763,764,5,5,0,0,764,765,3,50,25,0,
        765,766,5,33,0,0,766,767,5,3,0,0,767,768,3,82,41,0,768,769,5,4,0,
        0,769,771,1,0,0,0,770,763,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,
        0,772,773,1,0,0,0,773,49,1,0,0,0,774,772,1,0,0,0,775,787,3,180,90,
        0,776,777,5,3,0,0,777,782,3,184,92,0,778,779,5,5,0,0,779,781,3,184,
        92,0,780,778,1,0,0,0,781,784,1,0,0,0,782,780,1,0,0,0,782,783,1,0,
        0,0,783,785,1,0,0,0,784,782,1,0,0,0,785,786,5,4,0,0,786,788,1,0,
        0,0,787,776,1,0,0,0,787,788,1,0,0,0,788,51,1,0,0,0,789,790,3,50,
        25,0,790,791,5,33,0,0,791,792,5,3,0,0,792,793,3,160,80,0,793,795,
        5,139,0,0,794,796,5,29,0,0,795,794,1,0,0,0,795,796,1,0,0,0,796,797,
        1,0,0,0,797,798,3,162,81,0,798,799,5,4,0,0,799,53,1,0,0,0,800,812,
        3,180,90,0,801,802,5,3,0,0,802,807,3,184,92,0,803,804,5,5,0,0,804,
        806,3,184,92,0,805,803,1,0,0,0,806,809,1,0,0,0,807,805,1,0,0,0,807,
        808,1,0,0,0,808,810,1,0,0,0,809,807,1,0,0,0,810,811,5,4,0,0,811,
        813,1,0,0,0,812,801,1,0,0,0,812,813,1,0,0,0,813,814,1,0,0,0,814,
        815,5,33,0,0,815,816,5,3,0,0,816,817,3,82,41,0,817,818,5,4,0,0,818,
        55,1,0,0,0,819,821,3,48,24,0,820,819,1,0,0,0,820,821,1,0,0,0,821,
        822,1,0,0,0,822,823,5,59,0,0,823,824,5,75,0,0,824,827,3,110,55,0,
        825,826,5,148,0,0,826,828,3,64,32,0,827,825,1,0,0,0,827,828,1,0,
        0,0,828,830,1,0,0,0,829,831,3,72,36,0,830,829,1,0,0,0,830,831,1,
        0,0,0,831,57,1,0,0,0,832,834,3,48,24,0,833,832,1,0,0,0,833,834,1,
        0,0,0,834,835,1,0,0,0,835,836,5,59,0,0,836,837,5,75,0,0,837,840,
        3,110,55,0,838,839,5,148,0,0,839,841,3,64,32,0,840,838,1,0,0,0,840,
        841,1,0,0,0,841,843,1,0,0,0,842,844,3,72,36,0,843,842,1,0,0,0,843,
        844,1,0,0,0,844,849,1,0,0,0,845,847,3,132,66,0,846,845,1,0,0,0,846,
        847,1,0,0,0,847,848,1,0,0,0,848,850,3,134,67,0,849,846,1,0,0,0,849,
        850,1,0,0,0,850,59,1,0,0,0,851,853,5,61,0,0,852,854,5,55,0,0,853,
        852,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,856,3,178,89,0,856,
        61,1,0,0,0,857,858,5,63,0,0,858,861,7,9,0,0,859,860,5,80,0,0,860,
        862,5,70,0,0,861,859,1,0,0,0,861,862,1,0,0,0,862,866,1,0,0,0,863,
        864,3,178,89,0,864,865,5,2,0,0,865,867,1,0,0,0,866,863,1,0,0,0,866,
        867,1,0,0,0,867,868,1,0,0,0,868,869,3,220,110,0,869,63,1,0,0,0,870,
        871,6,32,-1,0,871,959,3,68,34,0,872,959,5,187,0,0,873,874,3,178,
        89,0,874,875,5,2,0,0,875,877,1,0,0,0,876,873,1,0,0,0,876,877,1,0,
        0,0,877,878,1,0,0,0,878,879,3,180,90,0,879,880,5,2,0,0,880,882,1,
        0,0,0,881,876,1,0,0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,959,3,
        184,92,0,884,885,3,164,82,0,885,886,3,64,32,21,886,959,1,0,0,0,887,
        888,3,176,88,0,888,901,5,3,0,0,889,891,5,62,0,0,890,889,1,0,0,0,
        890,891,1,0,0,0,891,892,1,0,0,0,892,897,3,64,32,0,893,894,5,5,0,
        0,894,896,3,64,32,0,895,893,1,0,0,0,896,899,1,0,0,0,897,895,1,0,
        0,0,897,898,1,0,0,0,898,902,1,0,0,0,899,897,1,0,0,0,900,902,5,7,
        0,0,901,890,1,0,0,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,
        0,0,903,905,5,4,0,0,904,906,3,114,57,0,905,904,1,0,0,0,905,906,1,
        0,0,0,906,908,1,0,0,0,907,909,3,118,59,0,908,907,1,0,0,0,908,909,
        1,0,0,0,909,959,1,0,0,0,910,911,5,3,0,0,911,916,3,64,32,0,912,913,
        5,5,0,0,913,915,3,64,32,0,914,912,1,0,0,0,915,918,1,0,0,0,916,914,
        1,0,0,0,916,917,1,0,0,0,917,919,1,0,0,0,918,916,1,0,0,0,919,920,
        5,4,0,0,920,959,1,0,0,0,921,922,5,43,0,0,922,923,5,3,0,0,923,924,
        3,64,32,0,924,925,5,33,0,0,925,926,3,30,15,0,926,927,5,4,0,0,927,
        959,1,0,0,0,928,930,5,102,0,0,929,928,1,0,0,0,929,930,1,0,0,0,930,
        931,1,0,0,0,931,933,5,70,0,0,932,929,1,0,0,0,932,933,1,0,0,0,933,
        934,1,0,0,0,934,935,5,3,0,0,935,936,3,82,41,0,936,937,5,4,0,0,937,
        959,1,0,0,0,938,940,5,42,0,0,939,941,3,64,32,0,940,939,1,0,0,0,940,
        941,1,0,0,0,941,947,1,0,0,0,942,943,5,147,0,0,943,944,3,64,32,0,
        944,945,5,135,0,0,945,946,3,64,32,0,946,948,1,0,0,0,947,942,1,0,
        0,0,948,949,1,0,0,0,949,947,1,0,0,0,949,950,1,0,0,0,950,953,1,0,
        0,0,951,952,5,65,0,0,952,954,3,64,32,0,953,951,1,0,0,0,953,954,1,
        0,0,0,954,955,1,0,0,0,955,956,5,66,0,0,956,959,1,0,0,0,957,959,3,
        66,33,0,958,870,1,0,0,0,958,872,1,0,0,0,958,881,1,0,0,0,958,884,
        1,0,0,0,958,887,1,0,0,0,958,910,1,0,0,0,958,921,1,0,0,0,958,932,
        1,0,0,0,958,938,1,0,0,0,958,957,1,0,0,0,959,1079,1,0,0,0,960,961,
        10,20,0,0,961,962,5,11,0,0,962,1078,3,64,32,21,963,964,10,19,0,0,
        964,965,7,10,0,0,965,1078,3,64,32,20,966,967,10,18,0,0,967,968,7,
        4,0,0,968,1078,3,64,32,19,969,970,10,17,0,0,970,971,7,11,0,0,971,
        1078,3,64,32,18,972,973,10,16,0,0,973,974,7,12,0,0,974,1078,3,64,
        32,17,975,988,10,15,0,0,976,989,5,6,0,0,977,989,5,22,0,0,978,989,
        5,23,0,0,979,989,5,24,0,0,980,989,5,92,0,0,981,982,5,92,0,0,982,
        989,5,102,0,0,983,989,5,83,0,0,984,989,5,97,0,0,985,989,5,77,0,0,
        986,989,5,99,0,0,987,989,5,118,0,0,988,976,1,0,0,0,988,977,1,0,0,
        0,988,978,1,0,0,0,988,979,1,0,0,0,988,980,1,0,0,0,988,981,1,0,0,
        0,988,983,1,0,0,0,988,984,1,0,0,0,988,985,1,0,0,0,988,986,1,0,0,
        0,988,987,1,0,0,0,989,990,1,0,0,0,990,1078,3,64,32,16,991,992,10,
        14,0,0,992,993,5,32,0,0,993,1078,3,64,32,15,994,995,10,13,0,0,995,
        996,5,108,0,0,996,1078,3,64,32,14,997,998,10,6,0,0,998,1000,5,92,
        0,0,999,1001,5,102,0,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1002,
        1,0,0,0,1002,1078,3,64,32,7,1003,1005,10,5,0,0,1004,1006,5,102,0,
        0,1005,1004,1,0,0,0,1005,1006,1,0,0,0,1006,1007,1,0,0,0,1007,1008,
        5,39,0,0,1008,1009,3,64,32,0,1009,1010,5,32,0,0,1010,1011,3,64,32,
        6,1011,1078,1,0,0,0,1012,1013,10,9,0,0,1013,1014,5,45,0,0,1014,1078,
        3,186,93,0,1015,1017,10,8,0,0,1016,1018,5,102,0,0,1017,1016,1,0,
        0,0,1017,1018,1,0,0,0,1018,1019,1,0,0,0,1019,1020,7,13,0,0,1020,
        1023,3,64,32,0,1021,1022,5,67,0,0,1022,1024,3,64,32,0,1023,1021,
        1,0,0,0,1023,1024,1,0,0,0,1024,1078,1,0,0,0,1025,1030,10,7,0,0,1026,
        1031,5,93,0,0,1027,1031,5,103,0,0,1028,1029,5,102,0,0,1029,1031,
        5,104,0,0,1030,1026,1,0,0,0,1030,1027,1,0,0,0,1030,1028,1,0,0,0,
        1031,1078,1,0,0,0,1032,1034,10,4,0,0,1033,1035,5,102,0,0,1034,1033,
        1,0,0,0,1034,1035,1,0,0,0,1035,1036,1,0,0,0,1036,1075,5,83,0,0,1037,
        1047,5,3,0,0,1038,1048,3,82,41,0,1039,1044,3,64,32,0,1040,1041,5,
        5,0,0,1041,1043,3,64,32,0,1042,1040,1,0,0,0,1043,1046,1,0,0,0,1044,
        1042,1,0,0,0,1044,1045,1,0,0,0,1045,1048,1,0,0,0,1046,1044,1,0,0,
        0,1047,1038,1,0,0,0,1047,1039,1,0,0,0,1047,1048,1,0,0,0,1048,1049,
        1,0,0,0,1049,1076,5,4,0,0,1050,1051,3,178,89,0,1051,1052,5,2,0,0,
        1052,1054,1,0,0,0,1053,1050,1,0,0,0,1053,1054,1,0,0,0,1054,1055,
        1,0,0,0,1055,1076,3,180,90,0,1056,1057,3,178,89,0,1057,1058,5,2,
        0,0,1058,1060,1,0,0,0,1059,1056,1,0,0,0,1059,1060,1,0,0,0,1060,1061,
        1,0,0,0,1061,1062,3,218,109,0,1062,1071,5,3,0,0,1063,1068,3,64,32,
        0,1064,1065,5,5,0,0,1065,1067,3,64,32,0,1066,1064,1,0,0,0,1067,1070,
        1,0,0,0,1068,1066,1,0,0,0,1068,1069,1,0,0,0,1069,1072,1,0,0,0,1070,
        1068,1,0,0,0,1071,1063,1,0,0,0,1071,1072,1,0,0,0,1072,1073,1,0,0,
        0,1073,1074,5,4,0,0,1074,1076,1,0,0,0,1075,1037,1,0,0,0,1075,1053,
        1,0,0,0,1075,1059,1,0,0,0,1076,1078,1,0,0,0,1077,960,1,0,0,0,1077,
        963,1,0,0,0,1077,966,1,0,0,0,1077,969,1,0,0,0,1077,972,1,0,0,0,1077,
        975,1,0,0,0,1077,991,1,0,0,0,1077,994,1,0,0,0,1077,997,1,0,0,0,1077,
        1003,1,0,0,0,1077,1012,1,0,0,0,1077,1015,1,0,0,0,1077,1025,1,0,0,
        0,1077,1032,1,0,0,0,1078,1081,1,0,0,0,1079,1077,1,0,0,0,1079,1080,
        1,0,0,0,1080,65,1,0,0,0,1081,1079,1,0,0,0,1082,1083,5,115,0,0,1083,
        1088,5,3,0,0,1084,1089,5,81,0,0,1085,1086,7,14,0,0,1086,1087,5,5,
        0,0,1087,1089,3,166,83,0,1088,1084,1,0,0,0,1088,1085,1,0,0,0,1089,
        1090,1,0,0,0,1090,1091,5,4,0,0,1091,67,1,0,0,0,1092,1093,7,15,0,
        0,1093,69,1,0,0,0,1094,1096,3,48,24,0,1095,1094,1,0,0,0,1095,1096,
        1,0,0,0,1096,1102,1,0,0,0,1097,1103,5,88,0,0,1098,1103,5,122,0,0,
        1099,1100,5,88,0,0,1100,1101,5,108,0,0,1101,1103,7,8,0,0,1102,1097,
        1,0,0,0,1102,1098,1,0,0,0,1102,1099,1,0,0,0,1103,1104,1,0,0,0,1104,
        1108,5,91,0,0,1105,1106,3,178,89,0,1106,1107,5,2,0,0,1107,1109,1,
        0,0,0,1108,1105,1,0,0,0,1108,1109,1,0,0,0,1109,1110,1,0,0,0,1110,
        1113,3,180,90,0,1111,1112,5,33,0,0,1112,1114,3,202,101,0,1113,1111,
        1,0,0,0,1113,1114,1,0,0,0,1114,1126,1,0,0,0,1115,1116,5,3,0,0,1116,
        1121,3,184,92,0,1117,1118,5,5,0,0,1118,1120,3,184,92,0,1119,1117,
        1,0,0,0,1120,1123,1,0,0,0,1121,1119,1,0,0,0,1121,1122,1,0,0,0,1122,
        1124,1,0,0,0,1123,1121,1,0,0,0,1124,1125,5,4,0,0,1125,1127,1,0,0,
        0,1126,1115,1,0,0,0,1126,1127,1,0,0,0,1127,1164,1,0,0,0,1128,1129,
        5,144,0,0,1129,1130,5,3,0,0,1130,1135,3,64,32,0,1131,1132,5,5,0,
        0,1132,1134,3,64,32,0,1133,1131,1,0,0,0,1134,1137,1,0,0,0,1135,1133,
        1,0,0,0,1135,1136,1,0,0,0,1136,1138,1,0,0,0,1137,1135,1,0,0,0,1138,
        1153,5,4,0,0,1139,1140,5,5,0,0,1140,1141,5,3,0,0,1141,1146,3,64,
        32,0,1142,1143,5,5,0,0,1143,1145,3,64,32,0,1144,1142,1,0,0,0,1145,
        1148,1,0,0,0,1146,1144,1,0,0,0,1146,1147,1,0,0,0,1147,1149,1,0,0,
        0,1148,1146,1,0,0,0,1149,1150,5,4,0,0,1150,1152,1,0,0,0,1151,1139,
        1,0,0,0,1152,1155,1,0,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,
        1158,1,0,0,0,1155,1153,1,0,0,0,1156,1158,3,82,41,0,1157,1128,1,0,
        0,0,1157,1156,1,0,0,0,1158,1160,1,0,0,0,1159,1161,3,74,37,0,1160,
        1159,1,0,0,0,1160,1161,1,0,0,0,1161,1165,1,0,0,0,1162,1163,5,56,
        0,0,1163,1165,5,144,0,0,1164,1157,1,0,0,0,1164,1162,1,0,0,0,1165,
        1167,1,0,0,0,1166,1168,3,72,36,0,1167,1166,1,0,0,0,1167,1168,1,0,
        0,0,1168,71,1,0,0,0,1169,1170,5,124,0,0,1170,1175,3,96,48,0,1171,
        1172,5,5,0,0,1172,1174,3,96,48,0,1173,1171,1,0,0,0,1174,1177,1,0,
        0,0,1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,73,1,0,0,0,1177,1175,
        1,0,0,0,1178,1179,5,107,0,0,1179,1194,5,48,0,0,1180,1181,5,3,0,0,
        1181,1186,3,24,12,0,1182,1183,5,5,0,0,1183,1185,3,24,12,0,1184,1182,
        1,0,0,0,1185,1188,1,0,0,0,1186,1184,1,0,0,0,1186,1187,1,0,0,0,1187,
        1189,1,0,0,0,1188,1186,1,0,0,0,1189,1192,5,4,0,0,1190,1191,5,148,
        0,0,1191,1193,3,64,32,0,1192,1190,1,0,0,0,1192,1193,1,0,0,0,1193,
        1195,1,0,0,0,1194,1180,1,0,0,0,1194,1195,1,0,0,0,1195,1196,1,0,0,
        0,1196,1223,5,183,0,0,1197,1224,5,184,0,0,1198,1199,5,141,0,0,1199,
        1202,5,131,0,0,1200,1203,3,184,92,0,1201,1203,3,106,53,0,1202,1200,
        1,0,0,0,1202,1201,1,0,0,0,1203,1204,1,0,0,0,1204,1205,5,6,0,0,1205,
        1216,3,64,32,0,1206,1209,5,5,0,0,1207,1210,3,184,92,0,1208,1210,
        3,106,53,0,1209,1207,1,0,0,0,1209,1208,1,0,0,0,1210,1211,1,0,0,0,
        1211,1212,5,6,0,0,1212,1213,3,64,32,0,1213,1215,1,0,0,0,1214,1206,
        1,0,0,0,1215,1218,1,0,0,0,1216,1214,1,0,0,0,1216,1217,1,0,0,0,1217,
        1221,1,0,0,0,1218,1216,1,0,0,0,1219,1220,5,148,0,0,1220,1222,3,64,
        32,0,1221,1219,1,0,0,0,1221,1222,1,0,0,0,1222,1224,1,0,0,0,1223,
        1197,1,0,0,0,1223,1198,1,0,0,0,1224,75,1,0,0,0,1225,1229,5,112,0,
        0,1226,1227,3,178,89,0,1227,1228,5,2,0,0,1228,1230,1,0,0,0,1229,
        1226,1,0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,1238,3,198,
        99,0,1232,1233,5,6,0,0,1233,1239,3,78,39,0,1234,1235,5,3,0,0,1235,
        1236,3,78,39,0,1236,1237,5,4,0,0,1237,1239,1,0,0,0,1238,1232,1,0,
        0,0,1238,1234,1,0,0,0,1238,1239,1,0,0,0,1239,77,1,0,0,0,1240,1244,
        3,34,17,0,1241,1244,3,174,87,0,1242,1244,5,188,0,0,1243,1240,1,0,
        0,0,1243,1241,1,0,0,0,1243,1242,1,0,0,0,1244,79,1,0,0,0,1245,1256,
        5,119,0,0,1246,1257,3,186,93,0,1247,1248,3,178,89,0,1248,1249,5,
        2,0,0,1249,1251,1,0,0,0,1250,1247,1,0,0,0,1250,1251,1,0,0,0,1251,
        1254,1,0,0,0,1252,1255,3,180,90,0,1253,1255,3,190,95,0,1254,1252,
        1,0,0,0,1254,1253,1,0,0,0,1255,1257,1,0,0,0,1256,1246,1,0,0,0,1256,
        1250,1,0,0,0,1256,1257,1,0,0,0,1257,81,1,0,0,0,1258,1260,3,130,65,
        0,1259,1258,1,0,0,0,1259,1260,1,0,0,0,1260,1261,1,0,0,0,1261,1267,
        3,86,43,0,1262,1263,3,102,51,0,1263,1264,3,86,43,0,1264,1266,1,0,
        0,0,1265,1262,1,0,0,0,1266,1269,1,0,0,0,1267,1265,1,0,0,0,1267,1268,
        1,0,0,0,1268,1271,1,0,0,0,1269,1267,1,0,0,0,1270,1272,3,132,66,0,
        1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,1274,1,0,0,0,1273,1275,
        3,134,67,0,1274,1273,1,0,0,0,1274,1275,1,0,0,0,1275,83,1,0,0,0,1276,
        1284,3,94,47,0,1277,1278,3,98,49,0,1278,1280,3,94,47,0,1279,1281,
        3,100,50,0,1280,1279,1,0,0,0,1280,1281,1,0,0,0,1281,1283,1,0,0,0,
        1282,1277,1,0,0,0,1283,1286,1,0,0,0,1284,1282,1,0,0,0,1284,1285,
        1,0,0,0,1285,85,1,0,0,0,1286,1284,1,0,0,0,1287,1289,5,130,0,0,1288,
        1290,7,16,0,0,1289,1288,1,0,0,0,1289,1290,1,0,0,0,1290,1291,1,0,
        0,0,1291,1296,3,96,48,0,1292,1293,5,5,0,0,1293,1295,3,96,48,0,1294,
        1292,1,0,0,0,1295,1298,1,0,0,0,1296,1294,1,0,0,0,1296,1297,1,0,0,
        0,1297,1311,1,0,0,0,1298,1296,1,0,0,0,1299,1309,5,75,0,0,1300,1305,
        3,94,47,0,1301,1302,5,5,0,0,1302,1304,3,94,47,0,1303,1301,1,0,0,
        0,1304,1307,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,0,1306,1310,
        1,0,0,0,1307,1305,1,0,0,0,1308,1310,3,84,42,0,1309,1300,1,0,0,0,
        1309,1308,1,0,0,0,1310,1312,1,0,0,0,1311,1299,1,0,0,0,1311,1312,
        1,0,0,0,1312,1315,1,0,0,0,1313,1314,5,148,0,0,1314,1316,3,64,32,
        0,1315,1313,1,0,0,0,1315,1316,1,0,0,0,1316,1331,1,0,0,0,1317,1318,
        5,78,0,0,1318,1319,5,40,0,0,1319,1324,3,64,32,0,1320,1321,5,5,0,
        0,1321,1323,3,64,32,0,1322,1320,1,0,0,0,1323,1326,1,0,0,0,1324,1322,
        1,0,0,0,1324,1325,1,0,0,0,1325,1329,1,0,0,0,1326,1324,1,0,0,0,1327,
        1328,5,79,0,0,1328,1330,3,64,32,0,1329,1327,1,0,0,0,1329,1330,1,
        0,0,0,1330,1332,1,0,0,0,1331,1317,1,0,0,0,1331,1332,1,0,0,0,1332,
        1347,1,0,0,0,1333,1334,5,174,0,0,1334,1335,3,206,103,0,1335,1336,
        5,33,0,0,1336,1344,3,116,58,0,1337,1338,5,5,0,0,1338,1339,3,206,
        103,0,1339,1340,5,33,0,0,1340,1341,3,116,58,0,1341,1343,1,0,0,0,
        1342,1337,1,0,0,0,1343,1346,1,0,0,0,1344,1342,1,0,0,0,1344,1345,
        1,0,0,0,1345,1348,1,0,0,0,1346,1344,1,0,0,0,1347,1333,1,0,0,0,1347,
        1348,1,0,0,0,1348,1378,1,0,0,0,1349,1350,5,144,0,0,1350,1351,5,3,
        0,0,1351,1356,3,64,32,0,1352,1353,5,5,0,0,1353,1355,3,64,32,0,1354,
        1352,1,0,0,0,1355,1358,1,0,0,0,1356,1354,1,0,0,0,1356,1357,1,0,0,
        0,1357,1359,1,0,0,0,1358,1356,1,0,0,0,1359,1374,5,4,0,0,1360,1361,
        5,5,0,0,1361,1362,5,3,0,0,1362,1367,3,64,32,0,1363,1364,5,5,0,0,
        1364,1366,3,64,32,0,1365,1363,1,0,0,0,1366,1369,1,0,0,0,1367,1365,
        1,0,0,0,1367,1368,1,0,0,0,1368,1370,1,0,0,0,1369,1367,1,0,0,0,1370,
        1371,5,4,0,0,1371,1373,1,0,0,0,1372,1360,1,0,0,0,1373,1376,1,0,0,
        0,1374,1372,1,0,0,0,1374,1375,1,0,0,0,1375,1378,1,0,0,0,1376,1374,
        1,0,0,0,1377,1287,1,0,0,0,1377,1349,1,0,0,0,1378,87,1,0,0,0,1379,
        1380,3,82,41,0,1380,89,1,0,0,0,1381,1383,3,130,65,0,1382,1381,1,
        0,0,0,1382,1383,1,0,0,0,1383,1384,1,0,0,0,1384,1386,3,86,43,0,1385,
        1387,3,132,66,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,1389,1,
        0,0,0,1388,1390,3,134,67,0,1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,
        91,1,0,0,0,1391,1393,3,130,65,0,1392,1391,1,0,0,0,1392,1393,1,0,
        0,0,1393,1394,1,0,0,0,1394,1404,3,86,43,0,1395,1397,5,139,0,0,1396,
        1398,5,29,0,0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,1402,1,0,
        0,0,1399,1402,5,90,0,0,1400,1402,5,68,0,0,1401,1395,1,0,0,0,1401,
        1399,1,0,0,0,1401,1400,1,0,0,0,1402,1403,1,0,0,0,1403,1405,3,86,
        43,0,1404,1401,1,0,0,0,1405,1406,1,0,0,0,1406,1404,1,0,0,0,1406,
        1407,1,0,0,0,1407,1409,1,0,0,0,1408,1410,3,132,66,0,1409,1408,1,
        0,0,0,1409,1410,1,0,0,0,1410,1412,1,0,0,0,1411,1413,3,134,67,0,1412,
        1411,1,0,0,0,1412,1413,1,0,0,0,1413,93,1,0,0,0,1414,1415,3,178,89,
        0,1415,1416,5,2,0,0,1416,1418,1,0,0,0,1417,1414,1,0,0,0,1417,1418,
        1,0,0,0,1418,1419,1,0,0,0,1419,1424,3,180,90,0,1420,1422,5,33,0,
        0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,1423,1,0,0,0,1423,1425,
        3,202,101,0,1424,1421,1,0,0,0,1424,1425,1,0,0,0,1425,1431,1,0,0,
        0,1426,1427,5,85,0,0,1427,1428,5,40,0,0,1428,1432,3,190,95,0,1429,
        1430,5,102,0,0,1430,1432,5,85,0,0,1431,1426,1,0,0,0,1431,1429,1,
        0,0,0,1431,1432,1,0,0,0,1432,1479,1,0,0,0,1433,1434,3,178,89,0,1434,
        1435,5,2,0,0,1435,1437,1,0,0,0,1436,1433,1,0,0,0,1436,1437,1,0,0,
        0,1437,1438,1,0,0,0,1438,1439,3,218,109,0,1439,1440,5,3,0,0,1440,
        1445,3,64,32,0,1441,1442,5,5,0,0,1442,1444,3,64,32,0,1443,1441,1,
        0,0,0,1444,1447,1,0,0,0,1445,1443,1,0,0,0,1445,1446,1,0,0,0,1446,
        1448,1,0,0,0,1447,1445,1,0,0,0,1448,1453,5,4,0,0,1449,1451,5,33,
        0,0,1450,1449,1,0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1454,
        3,202,101,0,1453,1450,1,0,0,0,1453,1454,1,0,0,0,1454,1479,1,0,0,
        0,1455,1465,5,3,0,0,1456,1461,3,94,47,0,1457,1458,5,5,0,0,1458,1460,
        3,94,47,0,1459,1457,1,0,0,0,1460,1463,1,0,0,0,1461,1459,1,0,0,0,
        1461,1462,1,0,0,0,1462,1466,1,0,0,0,1463,1461,1,0,0,0,1464,1466,
        3,84,42,0,1465,1456,1,0,0,0,1465,1464,1,0,0,0,1466,1467,1,0,0,0,
        1467,1468,5,4,0,0,1468,1479,1,0,0,0,1469,1470,5,3,0,0,1470,1471,
        3,82,41,0,1471,1476,5,4,0,0,1472,1474,5,33,0,0,1473,1472,1,0,0,0,
        1473,1474,1,0,0,0,1474,1475,1,0,0,0,1475,1477,3,202,101,0,1476,1473,
        1,0,0,0,1476,1477,1,0,0,0,1477,1479,1,0,0,0,1478,1417,1,0,0,0,1478,
        1436,1,0,0,0,1478,1455,1,0,0,0,1478,1469,1,0,0,0,1479,95,1,0,0,0,
        1480,1493,5,7,0,0,1481,1482,3,180,90,0,1482,1483,5,2,0,0,1483,1484,
        5,7,0,0,1484,1493,1,0,0,0,1485,1490,3,64,32,0,1486,1488,5,33,0,0,
        1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,1489,1,0,0,0,1489,1491,
        3,170,85,0,1490,1487,1,0,0,0,1490,1491,1,0,0,0,1491,1493,1,0,0,0,
        1492,1480,1,0,0,0,1492,1481,1,0,0,0,1492,1485,1,0,0,0,1493,97,1,
        0,0,0,1494,1508,5,5,0,0,1495,1497,5,100,0,0,1496,1495,1,0,0,0,1496,
        1497,1,0,0,0,1497,1504,1,0,0,0,1498,1500,5,96,0,0,1499,1501,5,110,
        0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,1505,1,0,0,0,1502,1505,
        5,87,0,0,1503,1505,5,51,0,0,1504,1498,1,0,0,0,1504,1502,1,0,0,0,
        1504,1503,1,0,0,0,1504,1505,1,0,0,0,1505,1506,1,0,0,0,1506,1508,
        5,94,0,0,1507,1494,1,0,0,0,1507,1496,1,0,0,0,1508,99,1,0,0,0,1509,
        1510,5,107,0,0,1510,1524,3,64,32,0,1511,1512,5,142,0,0,1512,1513,
        5,3,0,0,1513,1518,3,184,92,0,1514,1515,5,5,0,0,1515,1517,3,184,92,
        0,1516,1514,1,0,0,0,1517,1520,1,0,0,0,1518,1516,1,0,0,0,1518,1519,
        1,0,0,0,1519,1521,1,0,0,0,1520,1518,1,0,0,0,1521,1522,5,4,0,0,1522,
        1524,1,0,0,0,1523,1509,1,0,0,0,1523,1511,1,0,0,0,1524,101,1,0,0,
        0,1525,1527,5,139,0,0,1526,1528,5,29,0,0,1527,1526,1,0,0,0,1527,
        1528,1,0,0,0,1528,1532,1,0,0,0,1529,1532,5,90,0,0,1530,1532,5,68,
        0,0,1531,1525,1,0,0,0,1531,1529,1,0,0,0,1531,1530,1,0,0,0,1532,103,
        1,0,0,0,1533,1535,3,48,24,0,1534,1533,1,0,0,0,1534,1535,1,0,0,0,
        1535,1536,1,0,0,0,1536,1539,5,141,0,0,1537,1538,5,108,0,0,1538,1540,
        7,8,0,0,1539,1537,1,0,0,0,1539,1540,1,0,0,0,1540,1541,1,0,0,0,1541,
        1542,3,110,55,0,1542,1545,5,131,0,0,1543,1546,3,184,92,0,1544,1546,
        3,106,53,0,1545,1543,1,0,0,0,1545,1544,1,0,0,0,1546,1547,1,0,0,0,
        1547,1548,5,6,0,0,1548,1559,3,64,32,0,1549,1552,5,5,0,0,1550,1553,
        3,184,92,0,1551,1553,3,106,53,0,1552,1550,1,0,0,0,1552,1551,1,0,
        0,0,1553,1554,1,0,0,0,1554,1555,5,6,0,0,1555,1556,3,64,32,0,1556,
        1558,1,0,0,0,1557,1549,1,0,0,0,1558,1561,1,0,0,0,1559,1557,1,0,0,
        0,1559,1560,1,0,0,0,1560,1574,1,0,0,0,1561,1559,1,0,0,0,1562,1572,
        5,75,0,0,1563,1568,3,94,47,0,1564,1565,5,5,0,0,1565,1567,3,94,47,
        0,1566,1564,1,0,0,0,1567,1570,1,0,0,0,1568,1566,1,0,0,0,1568,1569,
        1,0,0,0,1569,1573,1,0,0,0,1570,1568,1,0,0,0,1571,1573,3,84,42,0,
        1572,1563,1,0,0,0,1572,1571,1,0,0,0,1573,1575,1,0,0,0,1574,1562,
        1,0,0,0,1574,1575,1,0,0,0,1575,1578,1,0,0,0,1576,1577,5,148,0,0,
        1577,1579,3,64,32,0,1578,1576,1,0,0,0,1578,1579,1,0,0,0,1579,1581,
        1,0,0,0,1580,1582,3,72,36,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,
        1582,105,1,0,0,0,1583,1584,5,3,0,0,1584,1589,3,184,92,0,1585,1586,
        5,5,0,0,1586,1588,3,184,92,0,1587,1585,1,0,0,0,1588,1591,1,0,0,0,
        1589,1587,1,0,0,0,1589,1590,1,0,0,0,1590,1592,1,0,0,0,1591,1589,
        1,0,0,0,1592,1593,5,4,0,0,1593,107,1,0,0,0,1594,1596,3,48,24,0,1595,
        1594,1,0,0,0,1595,1596,1,0,0,0,1596,1597,1,0,0,0,1597,1600,5,141,
        0,0,1598,1599,5,108,0,0,1599,1601,7,8,0,0,1600,1598,1,0,0,0,1600,
        1601,1,0,0,0,1601,1602,1,0,0,0,1602,1603,3,110,55,0,1603,1606,5,
        131,0,0,1604,1607,3,184,92,0,1605,1607,3,106,53,0,1606,1604,1,0,
        0,0,1606,1605,1,0,0,0,1607,1608,1,0,0,0,1608,1609,5,6,0,0,1609,1620,
        3,64,32,0,1610,1613,5,5,0,0,1611,1614,3,184,92,0,1612,1614,3,106,
        53,0,1613,1611,1,0,0,0,1613,1612,1,0,0,0,1614,1615,1,0,0,0,1615,
        1616,5,6,0,0,1616,1617,3,64,32,0,1617,1619,1,0,0,0,1618,1610,1,0,
        0,0,1619,1622,1,0,0,0,1620,1618,1,0,0,0,1620,1621,1,0,0,0,1621,1625,
        1,0,0,0,1622,1620,1,0,0,0,1623,1624,5,148,0,0,1624,1626,3,64,32,
        0,1625,1623,1,0,0,0,1625,1626,1,0,0,0,1626,1628,1,0,0,0,1627,1629,
        3,72,36,0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1634,1,0,0,0,
        1630,1632,3,132,66,0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,1633,
        1,0,0,0,1633,1635,3,134,67,0,1634,1631,1,0,0,0,1634,1635,1,0,0,0,
        1635,109,1,0,0,0,1636,1637,3,178,89,0,1637,1638,5,2,0,0,1638,1640,
        1,0,0,0,1639,1636,1,0,0,0,1639,1640,1,0,0,0,1640,1641,1,0,0,0,1641,
        1644,3,180,90,0,1642,1643,5,33,0,0,1643,1645,3,208,104,0,1644,1642,
        1,0,0,0,1644,1645,1,0,0,0,1645,1651,1,0,0,0,1646,1647,5,85,0,0,1647,
        1648,5,40,0,0,1648,1652,3,190,95,0,1649,1650,5,102,0,0,1650,1652,
        5,85,0,0,1651,1646,1,0,0,0,1651,1649,1,0,0,0,1651,1652,1,0,0,0,1652,
        111,1,0,0,0,1653,1655,5,143,0,0,1654,1656,3,178,89,0,1655,1654,1,
        0,0,0,1655,1656,1,0,0,0,1656,1659,1,0,0,0,1657,1658,5,91,0,0,1658,
        1660,3,210,105,0,1659,1657,1,0,0,0,1659,1660,1,0,0,0,1660,113,1,
        0,0,0,1661,1662,5,178,0,0,1662,1663,5,3,0,0,1663,1664,5,148,0,0,
        1664,1665,3,64,32,0,1665,1666,5,4,0,0,1666,115,1,0,0,0,1667,1669,
        5,3,0,0,1668,1670,3,212,106,0,1669,1668,1,0,0,0,1669,1670,1,0,0,
        0,1670,1681,1,0,0,0,1671,1672,5,153,0,0,1672,1673,5,40,0,0,1673,
        1678,3,64,32,0,1674,1675,5,5,0,0,1675,1677,3,64,32,0,1676,1674,1,
        0,0,0,1677,1680,1,0,0,0,1678,1676,1,0,0,0,1678,1679,1,0,0,0,1679,
        1682,1,0,0,0,1680,1678,1,0,0,0,1681,1671,1,0,0,0,1681,1682,1,0,0,
        0,1682,1683,1,0,0,0,1683,1684,5,109,0,0,1684,1685,5,40,0,0,1685,
        1690,3,136,68,0,1686,1687,5,5,0,0,1687,1689,3,136,68,0,1688,1686,
        1,0,0,0,1689,1692,1,0,0,0,1690,1688,1,0,0,0,1690,1691,1,0,0,0,1691,
        1694,1,0,0,0,1692,1690,1,0,0,0,1693,1695,3,120,60,0,1694,1693,1,
        0,0,0,1694,1695,1,0,0,0,1695,1696,1,0,0,0,1696,1697,5,4,0,0,1697,
        117,1,0,0,0,1698,1732,5,152,0,0,1699,1733,3,206,103,0,1700,1702,
        5,3,0,0,1701,1703,3,212,106,0,1702,1701,1,0,0,0,1702,1703,1,0,0,
        0,1703,1714,1,0,0,0,1704,1705,5,153,0,0,1705,1706,5,40,0,0,1706,
        1711,3,64,32,0,1707,1708,5,5,0,0,1708,1710,3,64,32,0,1709,1707,1,
        0,0,0,1710,1713,1,0,0,0,1711,1709,1,0,0,0,1711,1712,1,0,0,0,1712,
        1715,1,0,0,0,1713,1711,1,0,0,0,1714,1704,1,0,0,0,1714,1715,1,0,0,
        0,1715,1726,1,0,0,0,1716,1717,5,109,0,0,1717,1718,5,40,0,0,1718,
        1723,3,136,68,0,1719,1720,5,5,0,0,1720,1722,3,136,68,0,1721,1719,
        1,0,0,0,1722,1725,1,0,0,0,1723,1721,1,0,0,0,1723,1724,1,0,0,0,1724,
        1727,1,0,0,0,1725,1723,1,0,0,0,1726,1716,1,0,0,0,1726,1727,1,0,0,
        0,1727,1729,1,0,0,0,1728,1730,3,120,60,0,1729,1728,1,0,0,0,1729,
        1730,1,0,0,0,1730,1731,1,0,0,0,1731,1733,5,4,0,0,1732,1699,1,0,0,
        0,1732,1700,1,0,0,0,1733,119,1,0,0,0,1734,1742,3,122,61,0,1735,1736,
        5,180,0,0,1736,1737,5,101,0,0,1737,1743,5,182,0,0,1738,1739,5,157,
        0,0,1739,1743,5,127,0,0,1740,1743,5,78,0,0,1741,1743,5,181,0,0,1742,
        1735,1,0,0,0,1742,1738,1,0,0,0,1742,1740,1,0,0,0,1742,1741,1,0,0,
        0,1742,1743,1,0,0,0,1743,121,1,0,0,0,1744,1751,7,17,0,0,1745,1752,
        3,144,72,0,1746,1747,5,39,0,0,1747,1748,3,140,70,0,1748,1749,5,32,
        0,0,1749,1750,3,142,71,0,1750,1752,1,0,0,0,1751,1745,1,0,0,0,1751,
        1746,1,0,0,0,1752,123,1,0,0,0,1753,1754,3,214,107,0,1754,1764,5,
        3,0,0,1755,1760,3,64,32,0,1756,1757,5,5,0,0,1757,1759,3,64,32,0,
        1758,1756,1,0,0,0,1759,1762,1,0,0,0,1760,1758,1,0,0,0,1760,1761,
        1,0,0,0,1761,1765,1,0,0,0,1762,1760,1,0,0,0,1763,1765,5,7,0,0,1764,
        1755,1,0,0,0,1764,1763,1,0,0,0,1765,1766,1,0,0,0,1766,1767,5,4,0,
        0,1767,125,1,0,0,0,1768,1769,3,216,108,0,1769,1782,5,3,0,0,1770,
        1772,5,62,0,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1773,1,0,
        0,0,1773,1778,3,64,32,0,1774,1775,5,5,0,0,1775,1777,3,64,32,0,1776,
        1774,1,0,0,0,1777,1780,1,0,0,0,1778,1776,1,0,0,0,1778,1779,1,0,0,
        0,1779,1783,1,0,0,0,1780,1778,1,0,0,0,1781,1783,5,7,0,0,1782,1771,
        1,0,0,0,1782,1781,1,0,0,0,1782,1783,1,0,0,0,1783,1784,1,0,0,0,1784,
        1786,5,4,0,0,1785,1787,3,114,57,0,1786,1785,1,0,0,0,1786,1787,1,
        0,0,0,1787,127,1,0,0,0,1788,1789,3,146,73,0,1789,1799,5,3,0,0,1790,
        1795,3,64,32,0,1791,1792,5,5,0,0,1792,1794,3,64,32,0,1793,1791,1,
        0,0,0,1794,1797,1,0,0,0,1795,1793,1,0,0,0,1795,1796,1,0,0,0,1796,
        1800,1,0,0,0,1797,1795,1,0,0,0,1798,1800,5,7,0,0,1799,1790,1,0,0,
        0,1799,1798,1,0,0,0,1799,1800,1,0,0,0,1800,1801,1,0,0,0,1801,1803,
        5,4,0,0,1802,1804,3,114,57,0,1803,1802,1,0,0,0,1803,1804,1,0,0,0,
        1804,1805,1,0,0,0,1805,1808,5,152,0,0,1806,1809,3,116,58,0,1807,
        1809,3,206,103,0,1808,1806,1,0,0,0,1808,1807,1,0,0,0,1809,129,1,
        0,0,0,1810,1812,5,149,0,0,1811,1813,5,116,0,0,1812,1811,1,0,0,0,
        1812,1813,1,0,0,0,1813,1814,1,0,0,0,1814,1819,3,54,27,0,1815,1816,
        5,5,0,0,1816,1818,3,54,27,0,1817,1815,1,0,0,0,1818,1821,1,0,0,0,
        1819,1817,1,0,0,0,1819,1820,1,0,0,0,1820,131,1,0,0,0,1821,1819,1,
        0,0,0,1822,1823,5,109,0,0,1823,1824,5,40,0,0,1824,1829,3,136,68,
        0,1825,1826,5,5,0,0,1826,1828,3,136,68,0,1827,1825,1,0,0,0,1828,
        1831,1,0,0,0,1829,1827,1,0,0,0,1829,1830,1,0,0,0,1830,133,1,0,0,
        0,1831,1829,1,0,0,0,1832,1833,5,98,0,0,1833,1836,3,64,32,0,1834,
        1835,7,18,0,0,1835,1837,3,64,32,0,1836,1834,1,0,0,0,1836,1837,1,
        0,0,0,1837,135,1,0,0,0,1838,1841,3,64,32,0,1839,1840,5,45,0,0,1840,
        1842,3,186,93,0,1841,1839,1,0,0,0,1841,1842,1,0,0,0,1842,1844,1,
        0,0,0,1843,1845,3,138,69,0,1844,1843,1,0,0,0,1844,1845,1,0,0,0,1845,
        1848,1,0,0,0,1846,1847,5,175,0,0,1847,1849,7,19,0,0,1848,1846,1,
        0,0,0,1848,1849,1,0,0,0,1849,137,1,0,0,0,1850,1851,7,20,0,0,1851,
        139,1,0,0,0,1852,1853,3,64,32,0,1853,1854,5,155,0,0,1854,1863,1,
        0,0,0,1855,1856,3,64,32,0,1856,1857,5,158,0,0,1857,1863,1,0,0,0,
        1858,1859,5,157,0,0,1859,1863,5,127,0,0,1860,1861,5,156,0,0,1861,
        1863,5,155,0,0,1862,1852,1,0,0,0,1862,1855,1,0,0,0,1862,1858,1,0,
        0,0,1862,1860,1,0,0,0,1863,141,1,0,0,0,1864,1865,3,64,32,0,1865,
        1866,5,155,0,0,1866,1875,1,0,0,0,1867,1868,3,64,32,0,1868,1869,5,
        158,0,0,1869,1875,1,0,0,0,1870,1871,5,157,0,0,1871,1875,5,127,0,
        0,1872,1873,5,156,0,0,1873,1875,5,158,0,0,1874,1864,1,0,0,0,1874,
        1867,1,0,0,0,1874,1870,1,0,0,0,1874,1872,1,0,0,0,1875,143,1,0,0,
        0,1876,1877,3,64,32,0,1877,1878,5,155,0,0,1878,1884,1,0,0,0,1879,
        1880,5,156,0,0,1880,1884,5,155,0,0,1881,1882,5,157,0,0,1882,1884,
        5,127,0,0,1883,1876,1,0,0,0,1883,1879,1,0,0,0,1883,1881,1,0,0,0,
        1884,145,1,0,0,0,1885,1886,7,21,0,0,1886,1887,5,3,0,0,1887,1888,
        3,64,32,0,1888,1889,5,4,0,0,1889,1890,5,152,0,0,1890,1892,5,3,0,
        0,1891,1893,3,152,76,0,1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,
        1894,1,0,0,0,1894,1896,3,156,78,0,1895,1897,3,122,61,0,1896,1895,
        1,0,0,0,1896,1897,1,0,0,0,1897,1898,1,0,0,0,1898,1899,5,4,0,0,1899,
        1971,1,0,0,0,1900,1901,7,22,0,0,1901,1902,5,3,0,0,1902,1903,5,4,
        0,0,1903,1904,5,152,0,0,1904,1906,5,3,0,0,1905,1907,3,152,76,0,1906,
        1905,1,0,0,0,1906,1907,1,0,0,0,1907,1909,1,0,0,0,1908,1910,3,154,
        77,0,1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,1911,1,0,0,0,1911,
        1971,5,4,0,0,1912,1913,7,23,0,0,1913,1914,5,3,0,0,1914,1915,5,4,
        0,0,1915,1916,5,152,0,0,1916,1918,5,3,0,0,1917,1919,3,152,76,0,1918,
        1917,1,0,0,0,1918,1919,1,0,0,0,1919,1920,1,0,0,0,1920,1921,3,156,
        78,0,1921,1922,5,4,0,0,1922,1971,1,0,0,0,1923,1924,7,24,0,0,1924,
        1925,5,3,0,0,1925,1927,3,64,32,0,1926,1928,3,148,74,0,1927,1926,
        1,0,0,0,1927,1928,1,0,0,0,1928,1930,1,0,0,0,1929,1931,3,150,75,0,
        1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,1932,1,0,0,0,1932,1933,
        5,4,0,0,1933,1934,5,152,0,0,1934,1936,5,3,0,0,1935,1937,3,152,76,
        0,1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,1938,1,0,0,0,1938,1939,
        3,156,78,0,1939,1940,5,4,0,0,1940,1971,1,0,0,0,1941,1942,5,164,0,
        0,1942,1943,5,3,0,0,1943,1944,3,64,32,0,1944,1945,5,5,0,0,1945,1946,
        3,34,17,0,1946,1947,5,4,0,0,1947,1948,5,152,0,0,1948,1950,5,3,0,
        0,1949,1951,3,152,76,0,1950,1949,1,0,0,0,1950,1951,1,0,0,0,1951,
        1952,1,0,0,0,1952,1954,3,156,78,0,1953,1955,3,122,61,0,1954,1953,
        1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,1957,5,4,0,0,1957,
        1971,1,0,0,0,1958,1959,5,165,0,0,1959,1960,5,3,0,0,1960,1961,3,64,
        32,0,1961,1962,5,4,0,0,1962,1963,5,152,0,0,1963,1965,5,3,0,0,1964,
        1966,3,152,76,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,1967,1,
        0,0,0,1967,1968,3,156,78,0,1968,1969,5,4,0,0,1969,1971,1,0,0,0,1970,
        1885,1,0,0,0,1970,1900,1,0,0,0,1970,1912,1,0,0,0,1970,1923,1,0,0,
        0,1970,1941,1,0,0,0,1970,1958,1,0,0,0,1971,147,1,0,0,0,1972,1973,
        5,5,0,0,1973,1974,3,34,17,0,1974,149,1,0,0,0,1975,1976,5,5,0,0,1976,
        1977,3,34,17,0,1977,151,1,0,0,0,1978,1979,5,153,0,0,1979,1981,5,
        40,0,0,1980,1982,3,64,32,0,1981,1980,1,0,0,0,1982,1983,1,0,0,0,1983,
        1981,1,0,0,0,1983,1984,1,0,0,0,1984,153,1,0,0,0,1985,1986,5,109,
        0,0,1986,1988,5,40,0,0,1987,1989,3,64,32,0,1988,1987,1,0,0,0,1989,
        1990,1,0,0,0,1990,1988,1,0,0,0,1990,1991,1,0,0,0,1991,155,1,0,0,
        0,1992,1993,5,109,0,0,1993,1994,5,40,0,0,1994,1995,3,158,79,0,1995,
        157,1,0,0,0,1996,1998,3,64,32,0,1997,1999,3,138,69,0,1998,1997,1,
        0,0,0,1998,1999,1,0,0,0,1999,2007,1,0,0,0,2000,2001,5,5,0,0,2001,
        2003,3,64,32,0,2002,2004,3,138,69,0,2003,2002,1,0,0,0,2003,2004,
        1,0,0,0,2004,2006,1,0,0,0,2005,2000,1,0,0,0,2006,2009,1,0,0,0,2007,
        2005,1,0,0,0,2007,2008,1,0,0,0,2008,159,1,0,0,0,2009,2007,1,0,0,
        0,2010,2011,3,82,41,0,2011,161,1,0,0,0,2012,2013,3,82,41,0,2013,
        163,1,0,0,0,2014,2015,7,25,0,0,2015,165,1,0,0,0,2016,2017,5,188,
        0,0,2017,167,1,0,0,0,2018,2021,3,64,32,0,2019,2021,3,28,14,0,2020,
        2018,1,0,0,0,2020,2019,1,0,0,0,2021,169,1,0,0,0,2022,2023,7,26,0,
        0,2023,171,1,0,0,0,2024,2025,7,27,0,0,2025,173,1,0,0,0,2026,2027,
        3,220,110,0,2027,175,1,0,0,0,2028,2029,3,220,110,0,2029,177,1,0,
        0,0,2030,2031,3,220,110,0,2031,179,1,0,0,0,2032,2033,3,220,110,0,
        2033,181,1,0,0,0,2034,2035,3,220,110,0,2035,183,1,0,0,0,2036,2037,
        3,220,110,0,2037,185,1,0,0,0,2038,2039,3,220,110,0,2039,187,1,0,
        0,0,2040,2041,3,220,110,0,2041,189,1,0,0,0,2042,2043,3,220,110,0,
        2043,191,1,0,0,0,2044,2045,3,220,110,0,2045,193,1,0,0,0,2046,2047,
        3,220,110,0,2047,195,1,0,0,0,2048,2049,3,220,110,0,2049,197,1,0,
        0,0,2050,2051,3,220,110,0,2051,199,1,0,0,0,2052,2053,3,220,110,0,
        2053,201,1,0,0,0,2054,2055,3,220,110,0,2055,203,1,0,0,0,2056,2057,
        3,220,110,0,2057,205,1,0,0,0,2058,2059,3,220,110,0,2059,207,1,0,
        0,0,2060,2061,3,220,110,0,2061,209,1,0,0,0,2062,2063,3,220,110,0,
        2063,211,1,0,0,0,2064,2065,3,220,110,0,2065,213,1,0,0,0,2066,2067,
        3,220,110,0,2067,215,1,0,0,0,2068,2069,3,220,110,0,2069,217,1,0,
        0,0,2070,2071,3,220,110,0,2071,219,1,0,0,0,2072,2080,5,185,0,0,2073,
        2080,3,172,86,0,2074,2080,5,188,0,0,2075,2076,5,3,0,0,2076,2077,
        3,220,110,0,2077,2078,5,4,0,0,2078,2080,1,0,0,0,2079,2072,1,0,0,
        0,2079,2073,1,0,0,0,2079,2074,1,0,0,0,2079,2075,1,0,0,0,2080,221,
        1,0,0,0,298,225,233,240,245,251,257,259,285,292,299,305,309,314,
        317,324,327,331,339,343,345,349,353,357,360,367,373,379,384,395,
        401,405,409,412,416,422,427,436,443,449,453,457,462,468,480,484,
        489,492,495,500,503,517,524,531,533,536,542,547,555,560,575,581,
        591,596,606,610,612,616,621,623,631,637,642,649,660,663,665,672,
        676,683,689,695,701,706,715,720,731,736,747,752,756,772,782,787,
        795,807,812,820,827,830,833,840,843,846,849,853,861,866,876,881,
        890,897,901,905,908,916,929,932,940,949,953,958,988,1000,1005,1017,
        1023,1030,1034,1044,1047,1053,1059,1068,1071,1075,1077,1079,1088,
        1095,1102,1108,1113,1121,1126,1135,1146,1153,1157,1160,1164,1167,
        1175,1186,1192,1194,1202,1209,1216,1221,1223,1229,1238,1243,1250,
        1254,1256,1259,1267,1271,1274,1280,1284,1289,1296,1305,1309,1311,
        1315,1324,1329,1331,1344,1347,1356,1367,1374,1377,1382,1386,1389,
        1392,1397,1401,1406,1409,1412,1417,1421,1424,1431,1436,1445,1450,
        1453,1461,1465,1473,1476,1478,1487,1490,1492,1496,1500,1504,1507,
        1518,1523,1527,1531,1534,1539,1545,1552,1559,1568,1572,1574,1578,
        1581,1589,1595,1600,1606,1613,1620,1625,1628,1631,1634,1639,1644,
        1651,1655,1659,1669,1678,1681,1690,1694,1702,1711,1714,1723,1726,
        1729,1732,1742,1751,1760,1764,1771,1778,1782,1786,1795,1799,1803,
        1808,1812,1819,1829,1836,1841,1844,1848,1862,1874,1883,1892,1896,
        1906,1909,1918,1927,1930,1936,1950,1954,1965,1970,1983,1990,1998,
        2003,2007,2020,2079
    ]

class SQLiteParser ( Parser ):

    grammarFileName = "SQLiteParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'", "'ABORT'", "'ACTION'", "'ADD'", 
                     "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", 
                     "'AS'", "'ASC'", "'ATTACH'", "'AUTOINCREMENT'", "'BEFORE'", 
                     "'BEGIN'", "'BETWEEN'", "'BY'", "'CASCADE'", "'CASE'", 
                     "'CAST'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'COMMIT'", 
                     "'CONFLICT'", "'CONSTRAINT'", "'CREATE'", "'CROSS'", 
                     "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'DATABASE'", "'DEFAULT'", "'DEFERRABLE'", "'DEFERRED'", 
                     "'DELETE'", "'DESC'", "'DETACH'", "'DISTINCT'", "'DROP'", 
                     "'EACH'", "'ELSE'", "'END'", "'ESCAPE'", "'EXCEPT'", 
                     "'EXCLUSIVE'", "'EXISTS'", "'EXPLAIN'", "'FAIL'", "'FOR'", 
                     "'FOREIGN'", "'FROM'", "'FULL'", "'GLOB'", "'GROUP'", 
                     "'HAVING'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IN'", 
                     "'INDEX'", "'INDEXED'", "'INITIALLY'", "'INNER'", "'INSERT'", 
                     "'INSTEAD'", "'INTERSECT'", "'INTO'", "'IS'", "'ISNULL'", 
                     "'JOIN'", "'KEY'", "'LEFT'", "'LIKE'", "'LIMIT'", "'MATCH'", 
                     "'NATURAL'", "'NO'", "'NOT'", "'NOTNULL'", "'NULL'", 
                     "'OF'", "'OFFSET'", "'ON'", "'OR'", "'ORDER'", "'OUTER'", 
                     "'PLAN'", "'PRAGMA'", "'PRIMARY'", "'QUERY'", "'RAISE'", 
                     "'RECURSIVE'", "'REFERENCES'", "'REGEXP'", "'REINDEX'", 
                     "'RELEASE'", "'RENAME'", "'REPLACE'", "'RESTRICT'", 
                     "'RETURNING'", "'RIGHT'", "'ROLLBACK'", "'ROW'", "'ROWS'", 
                     "'SAVEPOINT'", "'SELECT'", "'SET'", "'TABLE'", "'TEMP'", 
                     "'TEMPORARY'", "'THEN'", "'TO'", "'TRANSACTION'", "'TRIGGER'", 
                     "'UNION'", "'UNIQUE'", "'UPDATE'", "'USING'", "'VACUUM'", 
                     "'VALUES'", "'VIEW'", "'VIRTUAL'", "'WHEN'", "'WHERE'", 
                     "'WITH'", "'WITHOUT'", "'FIRST_VALUE'", "'OVER'", "'PARTITION'", 
                     "'RANGE'", "'PRECEDING'", "'UNBOUNDED'", "'CURRENT'", 
                     "'FOLLOWING'", "'CUME_DIST'", "'DENSE_RANK'", "'LAG'", 
                     "'LAST_VALUE'", "'LEAD'", "'NTH_VALUE'", "'NTILE'", 
                     "'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'GENERATED'", 
                     "'ALWAYS'", "'STORED'", "'TRUE'", "'FALSE'", "'WINDOW'", 
                     "'NULLS'", "'FIRST'", "'LAST'", "'FILTER'", "'GROUPS'", 
                     "'EXCLUDE'", "'TIES'", "'OTHERS'", "'DO'", "'NOTHING'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "ABORT_", "ACTION_", "ADD_", "AFTER_", "ALL_", "ALTER_", 
                      "ANALYZE_", "AND_", "AS_", "ASC_", "ATTACH_", "AUTOINCREMENT_", 
                      "BEFORE_", "BEGIN_", "BETWEEN_", "BY_", "CASCADE_", 
                      "CASE_", "CAST_", "CHECK_", "COLLATE_", "COLUMN_", 
                      "COMMIT_", "CONFLICT_", "CONSTRAINT_", "CREATE_", 
                      "CROSS_", "CURRENT_DATE_", "CURRENT_TIME_", "CURRENT_TIMESTAMP_", 
                      "DATABASE_", "DEFAULT_", "DEFERRABLE_", "DEFERRED_", 
                      "DELETE_", "DESC_", "DETACH_", "DISTINCT_", "DROP_", 
                      "EACH_", "ELSE_", "END_", "ESCAPE_", "EXCEPT_", "EXCLUSIVE_", 
                      "EXISTS_", "EXPLAIN_", "FAIL_", "FOR_", "FOREIGN_", 
                      "FROM_", "FULL_", "GLOB_", "GROUP_", "HAVING_", "IF_", 
                      "IGNORE_", "IMMEDIATE_", "IN_", "INDEX_", "INDEXED_", 
                      "INITIALLY_", "INNER_", "INSERT_", "INSTEAD_", "INTERSECT_", 
                      "INTO_", "IS_", "ISNULL_", "JOIN_", "KEY_", "LEFT_", 
                      "LIKE_", "LIMIT_", "MATCH_", "NATURAL_", "NO_", "NOT_", 
                      "NOTNULL_", "NULL_", "OF_", "OFFSET_", "ON_", "OR_", 
                      "ORDER_", "OUTER_", "PLAN_", "PRAGMA_", "PRIMARY_", 
                      "QUERY_", "RAISE_", "RECURSIVE_", "REFERENCES_", "REGEXP_", 
                      "REINDEX_", "RELEASE_", "RENAME_", "REPLACE_", "RESTRICT_", 
                      "RETURNING_", "RIGHT_", "ROLLBACK_", "ROW_", "ROWS_", 
                      "SAVEPOINT_", "SELECT_", "SET_", "TABLE_", "TEMP_", 
                      "TEMPORARY_", "THEN_", "TO_", "TRANSACTION_", "TRIGGER_", 
                      "UNION_", "UNIQUE_", "UPDATE_", "USING_", "VACUUM_", 
                      "VALUES_", "VIEW_", "VIRTUAL_", "WHEN_", "WHERE_", 
                      "WITH_", "WITHOUT_", "FIRST_VALUE_", "OVER_", "PARTITION_", 
                      "RANGE_", "PRECEDING_", "UNBOUNDED_", "CURRENT_", 
                      "FOLLOWING_", "CUME_DIST_", "DENSE_RANK_", "LAG_", 
                      "LAST_VALUE_", "LEAD_", "NTH_VALUE_", "NTILE_", "PERCENT_RANK_", 
                      "RANK_", "ROW_NUMBER_", "GENERATED_", "ALWAYS_", "STORED_", 
                      "TRUE_", "FALSE_", "WINDOW_", "NULLS_", "FIRST_", 
                      "LAST_", "FILTER_", "GROUPS_", "EXCLUDE_", "TIES_", 
                      "OTHERS_", "DO_", "NOTHING_", "IDENTIFIER", "NUMERIC_LITERAL", 
                      "BIND_PARAMETER", "STRING_LITERAL", "BLOB_LITERAL", 
                      "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
                      "UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_sql_stmt_list = 1
    RULE_sql_stmt = 2
    RULE_alter_table_stmt = 3
    RULE_analyze_stmt = 4
    RULE_attach_stmt = 5
    RULE_begin_stmt = 6
    RULE_commit_stmt = 7
    RULE_rollback_stmt = 8
    RULE_savepoint_stmt = 9
    RULE_release_stmt = 10
    RULE_create_index_stmt = 11
    RULE_indexed_column = 12
    RULE_create_table_stmt = 13
    RULE_column_def = 14
    RULE_type_name = 15
    RULE_column_constraint = 16
    RULE_signed_number = 17
    RULE_table_constraint = 18
    RULE_foreign_key_clause = 19
    RULE_conflict_clause = 20
    RULE_create_trigger_stmt = 21
    RULE_create_view_stmt = 22
    RULE_create_virtual_table_stmt = 23
    RULE_with_clause = 24
    RULE_cte_table_name = 25
    RULE_recursive_cte = 26
    RULE_common_table_expression = 27
    RULE_delete_stmt = 28
    RULE_delete_stmt_limited = 29
    RULE_detach_stmt = 30
    RULE_drop_stmt = 31
    RULE_expr = 32
    RULE_raise_function = 33
    RULE_literal_value = 34
    RULE_insert_stmt = 35
    RULE_returning_clause = 36
    RULE_upsert_clause = 37
    RULE_pragma_stmt = 38
    RULE_pragma_value = 39
    RULE_reindex_stmt = 40
    RULE_select_stmt = 41
    RULE_join_clause = 42
    RULE_select_core = 43
    RULE_factored_select_stmt = 44
    RULE_simple_select_stmt = 45
    RULE_compound_select_stmt = 46
    RULE_table_or_subquery = 47
    RULE_result_column = 48
    RULE_join_operator = 49
    RULE_join_constraint = 50
    RULE_compound_operator = 51
    RULE_update_stmt = 52
    RULE_column_name_list = 53
    RULE_update_stmt_limited = 54
    RULE_qualified_table_name = 55
    RULE_vacuum_stmt = 56
    RULE_filter_clause = 57
    RULE_window_defn = 58
    RULE_over_clause = 59
    RULE_frame_spec = 60
    RULE_frame_clause = 61
    RULE_simple_function_invocation = 62
    RULE_aggregate_function_invocation = 63
    RULE_window_function_invocation = 64
    RULE_common_table_stmt = 65
    RULE_order_by_stmt = 66
    RULE_limit_stmt = 67
    RULE_ordering_term = 68
    RULE_asc_desc = 69
    RULE_frame_left = 70
    RULE_frame_right = 71
    RULE_frame_single = 72
    RULE_window_function = 73
    RULE_offset = 74
    RULE_default_value = 75
    RULE_partition_by = 76
    RULE_order_by_expr = 77
    RULE_order_by_expr_asc_desc = 78
    RULE_expr_asc_desc = 79
    RULE_initial_select = 80
    RULE_recursive_select = 81
    RULE_unary_operator = 82
    RULE_error_message = 83
    RULE_module_argument = 84
    RULE_column_alias = 85
    RULE_keyword = 86
    RULE_name = 87
    RULE_function_name = 88
    RULE_schema_name = 89
    RULE_table_name = 90
    RULE_table_or_index_name = 91
    RULE_column_name = 92
    RULE_collation_name = 93
    RULE_foreign_table = 94
    RULE_index_name = 95
    RULE_trigger_name = 96
    RULE_view_name = 97
    RULE_module_name = 98
    RULE_pragma_name = 99
    RULE_savepoint_name = 100
    RULE_table_alias = 101
    RULE_transaction_name = 102
    RULE_window_name = 103
    RULE_alias = 104
    RULE_filename = 105
    RULE_base_window_name = 106
    RULE_simple_func = 107
    RULE_aggregate_func = 108
    RULE_table_function_name = 109
    RULE_any_name = 110

    ruleNames =  [ "parse", "sql_stmt_list", "sql_stmt", "alter_table_stmt", 
                   "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
                   "rollback_stmt", "savepoint_stmt", "release_stmt", "create_index_stmt", 
                   "indexed_column", "create_table_stmt", "column_def", 
                   "type_name", "column_constraint", "signed_number", "table_constraint", 
                   "foreign_key_clause", "conflict_clause", "create_trigger_stmt", 
                   "create_view_stmt", "create_virtual_table_stmt", "with_clause", 
                   "cte_table_name", "recursive_cte", "common_table_expression", 
                   "delete_stmt", "delete_stmt_limited", "detach_stmt", 
                   "drop_stmt", "expr", "raise_function", "literal_value", 
                   "insert_stmt", "returning_clause", "upsert_clause", "pragma_stmt", 
                   "pragma_value", "reindex_stmt", "select_stmt", "join_clause", 
                   "select_core", "factored_select_stmt", "simple_select_stmt", 
                   "compound_select_stmt", "table_or_subquery", "result_column", 
                   "join_operator", "join_constraint", "compound_operator", 
                   "update_stmt", "column_name_list", "update_stmt_limited", 
                   "qualified_table_name", "vacuum_stmt", "filter_clause", 
                   "window_defn", "over_clause", "frame_spec", "frame_clause", 
                   "simple_function_invocation", "aggregate_function_invocation", 
                   "window_function_invocation", "common_table_stmt", "order_by_stmt", 
                   "limit_stmt", "ordering_term", "asc_desc", "frame_left", 
                   "frame_right", "frame_single", "window_function", "offset", 
                   "default_value", "partition_by", "order_by_expr", "order_by_expr_asc_desc", 
                   "expr_asc_desc", "initial_select", "recursive_select", 
                   "unary_operator", "error_message", "module_argument", 
                   "column_alias", "keyword", "name", "function_name", "schema_name", 
                   "table_name", "table_or_index_name", "column_name", "collation_name", 
                   "foreign_table", "index_name", "trigger_name", "view_name", 
                   "module_name", "pragma_name", "savepoint_name", "table_alias", 
                   "transaction_name", "window_name", "alias", "filename", 
                   "base_window_name", "simple_func", "aggregate_func", 
                   "table_function_name", "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    ABORT_=25
    ACTION_=26
    ADD_=27
    AFTER_=28
    ALL_=29
    ALTER_=30
    ANALYZE_=31
    AND_=32
    AS_=33
    ASC_=34
    ATTACH_=35
    AUTOINCREMENT_=36
    BEFORE_=37
    BEGIN_=38
    BETWEEN_=39
    BY_=40
    CASCADE_=41
    CASE_=42
    CAST_=43
    CHECK_=44
    COLLATE_=45
    COLUMN_=46
    COMMIT_=47
    CONFLICT_=48
    CONSTRAINT_=49
    CREATE_=50
    CROSS_=51
    CURRENT_DATE_=52
    CURRENT_TIME_=53
    CURRENT_TIMESTAMP_=54
    DATABASE_=55
    DEFAULT_=56
    DEFERRABLE_=57
    DEFERRED_=58
    DELETE_=59
    DESC_=60
    DETACH_=61
    DISTINCT_=62
    DROP_=63
    EACH_=64
    ELSE_=65
    END_=66
    ESCAPE_=67
    EXCEPT_=68
    EXCLUSIVE_=69
    EXISTS_=70
    EXPLAIN_=71
    FAIL_=72
    FOR_=73
    FOREIGN_=74
    FROM_=75
    FULL_=76
    GLOB_=77
    GROUP_=78
    HAVING_=79
    IF_=80
    IGNORE_=81
    IMMEDIATE_=82
    IN_=83
    INDEX_=84
    INDEXED_=85
    INITIALLY_=86
    INNER_=87
    INSERT_=88
    INSTEAD_=89
    INTERSECT_=90
    INTO_=91
    IS_=92
    ISNULL_=93
    JOIN_=94
    KEY_=95
    LEFT_=96
    LIKE_=97
    LIMIT_=98
    MATCH_=99
    NATURAL_=100
    NO_=101
    NOT_=102
    NOTNULL_=103
    NULL_=104
    OF_=105
    OFFSET_=106
    ON_=107
    OR_=108
    ORDER_=109
    OUTER_=110
    PLAN_=111
    PRAGMA_=112
    PRIMARY_=113
    QUERY_=114
    RAISE_=115
    RECURSIVE_=116
    REFERENCES_=117
    REGEXP_=118
    REINDEX_=119
    RELEASE_=120
    RENAME_=121
    REPLACE_=122
    RESTRICT_=123
    RETURNING_=124
    RIGHT_=125
    ROLLBACK_=126
    ROW_=127
    ROWS_=128
    SAVEPOINT_=129
    SELECT_=130
    SET_=131
    TABLE_=132
    TEMP_=133
    TEMPORARY_=134
    THEN_=135
    TO_=136
    TRANSACTION_=137
    TRIGGER_=138
    UNION_=139
    UNIQUE_=140
    UPDATE_=141
    USING_=142
    VACUUM_=143
    VALUES_=144
    VIEW_=145
    VIRTUAL_=146
    WHEN_=147
    WHERE_=148
    WITH_=149
    WITHOUT_=150
    FIRST_VALUE_=151
    OVER_=152
    PARTITION_=153
    RANGE_=154
    PRECEDING_=155
    UNBOUNDED_=156
    CURRENT_=157
    FOLLOWING_=158
    CUME_DIST_=159
    DENSE_RANK_=160
    LAG_=161
    LAST_VALUE_=162
    LEAD_=163
    NTH_VALUE_=164
    NTILE_=165
    PERCENT_RANK_=166
    RANK_=167
    ROW_NUMBER_=168
    GENERATED_=169
    ALWAYS_=170
    STORED_=171
    TRUE_=172
    FALSE_=173
    WINDOW_=174
    NULLS_=175
    FIRST_=176
    LAST_=177
    FILTER_=178
    GROUPS_=179
    EXCLUDE_=180
    TIES_=181
    OTHERS_=182
    DO_=183
    NOTHING_=184
    IDENTIFIER=185
    NUMERIC_LITERAL=186
    BIND_PARAMETER=187
    STRING_LITERAL=188
    BLOB_LITERAL=189
    SINGLE_LINE_COMMENT=190
    MULTILINE_COMMENT=191
    SPACES=192
    UNEXPECTED_CHAR=193

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ParseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)




    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & -6339801325483589630) != 0 or (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -7971300971697405919) != 0 or (((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 550913) != 0:
                self.state = 222
                self.sql_stmt_list()
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 228
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 230
                self.match(SQLiteParser.SCOL)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 236
            self.sql_stmt()
            self.state = 245
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 238 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 237
                        self.match(SQLiteParser.SCOL)
                        self.state = 240 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    self.state = 242
                    self.sql_stmt() 
                self.state = 247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 251
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 248
                    self.match(SQLiteParser.SCOL) 
                self.state = 253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext,0)


        def drop_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext,0)


        def EXPLAIN_(self):
            return self.getToken(SQLiteParser.EXPLAIN_, 0)

        def QUERY_(self):
            return self.getToken(SQLiteParser.QUERY_, 0)

        def PLAN_(self):
            return self.getToken(SQLiteParser.PLAN_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 254
                self.match(SQLiteParser.EXPLAIN_)
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 255
                    self.match(SQLiteParser.QUERY_)
                    self.state = 256
                    self.match(SQLiteParser.PLAN_)




            self.state = 285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 261
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 262
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 263
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 264
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 265
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 266
                self.create_index_stmt()
                pass

            elif la_ == 7:
                self.state = 267
                self.create_table_stmt()
                pass

            elif la_ == 8:
                self.state = 268
                self.create_trigger_stmt()
                pass

            elif la_ == 9:
                self.state = 269
                self.create_view_stmt()
                pass

            elif la_ == 10:
                self.state = 270
                self.create_virtual_table_stmt()
                pass

            elif la_ == 11:
                self.state = 271
                self.delete_stmt()
                pass

            elif la_ == 12:
                self.state = 272
                self.delete_stmt_limited()
                pass

            elif la_ == 13:
                self.state = 273
                self.detach_stmt()
                pass

            elif la_ == 14:
                self.state = 274
                self.drop_stmt()
                pass

            elif la_ == 15:
                self.state = 275
                self.insert_stmt()
                pass

            elif la_ == 16:
                self.state = 276
                self.pragma_stmt()
                pass

            elif la_ == 17:
                self.state = 277
                self.reindex_stmt()
                pass

            elif la_ == 18:
                self.state = 278
                self.release_stmt()
                pass

            elif la_ == 19:
                self.state = 279
                self.rollback_stmt()
                pass

            elif la_ == 20:
                self.state = 280
                self.savepoint_stmt()
                pass

            elif la_ == 21:
                self.state = 281
                self.select_stmt()
                pass

            elif la_ == 22:
                self.state = 282
                self.update_stmt()
                pass

            elif la_ == 23:
                self.state = 283
                self.update_stmt_limited()
                pass

            elif la_ == 24:
                self.state = 284
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.new_table_name = None # Table_nameContext
            self.old_column_name = None # Column_nameContext
            self.new_column_name = None # Column_nameContext

        def ALTER_(self):
            return self.getToken(SQLiteParser.ALTER_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_nameContext,i)


        def RENAME_(self):
            return self.getToken(SQLiteParser.RENAME_, 0)

        def ADD_(self):
            return self.getToken(SQLiteParser.ADD_, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def DROP_(self):
            return self.getToken(SQLiteParser.DROP_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def TO_(self):
            return self.getToken(SQLiteParser.TO_, 0)

        def COLUMN_(self):
            return self.getToken(SQLiteParser.COLUMN_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = SQLiteParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(SQLiteParser.ALTER_)
            self.state = 288
            self.match(SQLiteParser.TABLE_)
            self.state = 292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 289
                self.schema_name()
                self.state = 290
                self.match(SQLiteParser.DOT)


            self.state = 294
            self.table_name()
            self.state = 317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121]:
                self.state = 295
                self.match(SQLiteParser.RENAME_)
                self.state = 305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 296
                    self.match(SQLiteParser.TO_)
                    self.state = 297
                    localctx.new_table_name = self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 299
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 298
                        self.match(SQLiteParser.COLUMN_)


                    self.state = 301
                    localctx.old_column_name = self.column_name()
                    self.state = 302
                    self.match(SQLiteParser.TO_)
                    self.state = 303
                    localctx.new_column_name = self.column_name()
                    pass


                pass
            elif token in [27]:
                self.state = 307
                self.match(SQLiteParser.ADD_)
                self.state = 309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 308
                    self.match(SQLiteParser.COLUMN_)


                self.state = 311
                self.column_def()
                pass
            elif token in [63]:
                self.state = 312
                self.match(SQLiteParser.DROP_)
                self.state = 314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 313
                    self.match(SQLiteParser.COLUMN_)


                self.state = 316
                self.column_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE_(self):
            return self.getToken(SQLiteParser.ANALYZE_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_stmt" ):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_stmt" ):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(SQLiteParser.ANALYZE_)
            self.state = 327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 320
                self.schema_name()

            elif la_ == 2:
                self.state = 324
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 321
                    self.schema_name()
                    self.state = 322
                    self.match(SQLiteParser.DOT)


                self.state = 326
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH_(self):
            return self.getToken(SQLiteParser.ATTACH_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE_(self):
            return self.getToken(SQLiteParser.DATABASE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttach_stmt" ):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttach_stmt" ):
                listener.exitAttach_stmt(self)




    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.match(SQLiteParser.ATTACH_)
            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 330
                self.match(SQLiteParser.DATABASE_)


            self.state = 333
            self.expr(0)
            self.state = 334
            self.match(SQLiteParser.AS_)
            self.state = 335
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_(self):
            return self.getToken(SQLiteParser.BEGIN_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def DEFERRED_(self):
            return self.getToken(SQLiteParser.DEFERRED_, 0)

        def IMMEDIATE_(self):
            return self.getToken(SQLiteParser.IMMEDIATE_, 0)

        def EXCLUSIVE_(self):
            return self.getToken(SQLiteParser.EXCLUSIVE_, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_stmt" ):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_stmt" ):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(SQLiteParser.BEGIN_)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 16779265) != 0:
                self.state = 338
                _la = self._input.LA(1)
                if not((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 16779265) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 341
                self.match(SQLiteParser.TRANSACTION_)
                self.state = 343
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 342
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT_(self):
            return self.getToken(SQLiteParser.COMMIT_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stmt" ):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stmt" ):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            _la = self._input.LA(1)
            if not(_la==47 or _la==66):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 348
                self.match(SQLiteParser.TRANSACTION_)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def TO_(self):
            return self.getToken(SQLiteParser.TO_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stmt" ):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stmt" ):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(SQLiteParser.ROLLBACK_)
            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 352
                self.match(SQLiteParser.TRANSACTION_)


            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 355
                self.match(SQLiteParser.TO_)
                self.state = 357
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 356
                    self.match(SQLiteParser.SAVEPOINT_)


                self.state = 359
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_stmt" ):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_stmt" ):
                listener.exitSavepoint_stmt(self)




    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(SQLiteParser.SAVEPOINT_)
            self.state = 363
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Release_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE_(self):
            return self.getToken(SQLiteParser.RELEASE_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelease_stmt" ):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelease_stmt" ):
                listener.exitRelease_stmt(self)




    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(SQLiteParser.RELEASE_)
            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 366
                self.match(SQLiteParser.SAVEPOINT_)


            self.state = 369
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def INDEX_(self):
            return self.getToken(SQLiteParser.INDEX_, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = SQLiteParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(SQLiteParser.CREATE_)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 372
                self.match(SQLiteParser.UNIQUE_)


            self.state = 375
            self.match(SQLiteParser.INDEX_)
            self.state = 379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 376
                self.match(SQLiteParser.IF_)
                self.state = 377
                self.match(SQLiteParser.NOT_)
                self.state = 378
                self.match(SQLiteParser.EXISTS_)


            self.state = 384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 381
                self.schema_name()
                self.state = 382
                self.match(SQLiteParser.DOT)


            self.state = 386
            self.index_name()
            self.state = 387
            self.match(SQLiteParser.ON_)
            self.state = 388
            self.table_name()
            self.state = 389
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 390
            self.indexed_column()
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 391
                self.match(SQLiteParser.COMMA)
                self.state = 392
                self.indexed_column()
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 398
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 399
                self.match(SQLiteParser.WHERE_)
                self.state = 400
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = SQLiteParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 403
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 404
                self.expr(0)
                pass


            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 407
                self.match(SQLiteParser.COLLATE_)
                self.state = 408
                self.collation_name()


            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==60:
                self.state = 411
                self.asc_desc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_ROW_ID = None # Token

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_defContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_constraintContext,i)


        def WITHOUT_(self):
            return self.getToken(SQLiteParser.WITHOUT_, 0)

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = SQLiteParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(SQLiteParser.CREATE_)
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==134:
                self.state = 415
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 418
            self.match(SQLiteParser.TABLE_)
            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 419
                self.match(SQLiteParser.IF_)
                self.state = 420
                self.match(SQLiteParser.NOT_)
                self.state = 421
                self.match(SQLiteParser.EXISTS_)


            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 424
                self.schema_name()
                self.state = 425
                self.match(SQLiteParser.DOT)


            self.state = 429
            self.table_name()
            self.state = 453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.state = 430
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 431
                self.column_def()
                self.state = 436
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 432
                        self.match(SQLiteParser.COMMA)
                        self.state = 433
                        self.column_def() 
                    self.state = 438
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 439
                    self.match(SQLiteParser.COMMA)
                    self.state = 440
                    self.table_constraint()
                    self.state = 445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 446
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==150:
                    self.state = 447
                    self.match(SQLiteParser.WITHOUT_)
                    self.state = 448
                    localctx.row_ROW_ID = self.match(SQLiteParser.IDENTIFIER)


                pass
            elif token in [33]:
                self.state = 451
                self.match(SQLiteParser.AS_)
                self.state = 452
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = SQLiteParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.column_name()
            self.state = 457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 456
                self.type_name()


            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 72673329139417088) != 0 or (((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 274877941761) != 0 or _la==169:
                self.state = 459
                self.column_constraint()
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 465
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 468 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 470
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 471
                self.signed_number()
                self.state = 472
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 474
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 475
                self.signed_number()
                self.state = 476
                self.match(SQLiteParser.COMMA)
                self.state = 477
                self.signed_number()
                self.state = 478
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK_(self):
            return self.getToken(SQLiteParser.CHECK_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def DEFAULT_(self):
            return self.getToken(SQLiteParser.DEFAULT_, 0)

        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def CONSTRAINT_(self):
            return self.getToken(SQLiteParser.CONSTRAINT_, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def PRIMARY_(self):
            return self.getToken(SQLiteParser.PRIMARY_, 0)

        def KEY_(self):
            return self.getToken(SQLiteParser.KEY_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def GENERATED_(self):
            return self.getToken(SQLiteParser.GENERATED_, 0)

        def ALWAYS_(self):
            return self.getToken(SQLiteParser.ALWAYS_, 0)

        def STORED_(self):
            return self.getToken(SQLiteParser.STORED_, 0)

        def VIRTUAL_(self):
            return self.getToken(SQLiteParser.VIRTUAL_, 0)

        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def AUTOINCREMENT_(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = SQLiteParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 482
                self.match(SQLiteParser.CONSTRAINT_)
                self.state = 483
                self.name()


            self.state = 533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.state = 486
                self.match(SQLiteParser.PRIMARY_)
                self.state = 487
                self.match(SQLiteParser.KEY_)
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34 or _la==60:
                    self.state = 488
                    self.asc_desc()


                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 491
                    self.conflict_clause()


                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 494
                    self.match(SQLiteParser.AUTOINCREMENT_)


                pass
            elif token in [102, 140]:
                self.state = 500
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [102]:
                    self.state = 497
                    self.match(SQLiteParser.NOT_)
                    self.state = 498
                    self.match(SQLiteParser.NULL_)
                    pass
                elif token in [140]:
                    self.state = 499
                    self.match(SQLiteParser.UNIQUE_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 502
                    self.conflict_clause()


                pass
            elif token in [44]:
                self.state = 505
                self.match(SQLiteParser.CHECK_)
                self.state = 506
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 507
                self.expr(0)
                self.state = 508
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [56]:
                self.state = 510
                self.match(SQLiteParser.DEFAULT_)
                self.state = 517
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 511
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 512
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 513
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 514
                    self.expr(0)
                    self.state = 515
                    self.match(SQLiteParser.CLOSE_PAR)
                    pass


                pass
            elif token in [45]:
                self.state = 519
                self.match(SQLiteParser.COLLATE_)
                self.state = 520
                self.collation_name()
                pass
            elif token in [117]:
                self.state = 521
                self.foreign_key_clause()
                pass
            elif token in [33, 169]:
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==169:
                    self.state = 522
                    self.match(SQLiteParser.GENERATED_)
                    self.state = 523
                    self.match(SQLiteParser.ALWAYS_)


                self.state = 526
                self.match(SQLiteParser.AS_)
                self.state = 527
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 528
                self.expr(0)
                self.state = 529
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146 or _la==171:
                    self.state = 530
                    _la = self._input.LA(1)
                    if not(_la==146 or _la==171):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 535
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 538
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def CHECK_(self):
            return self.getToken(SQLiteParser.CHECK_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def FOREIGN_(self):
            return self.getToken(SQLiteParser.FOREIGN_, 0)

        def KEY_(self):
            return self.getToken(SQLiteParser.KEY_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def CONSTRAINT_(self):
            return self.getToken(SQLiteParser.CONSTRAINT_, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def PRIMARY_(self):
            return self.getToken(SQLiteParser.PRIMARY_, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = SQLiteParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 540
                self.match(SQLiteParser.CONSTRAINT_)
                self.state = 541
                self.name()


            self.state = 581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113, 140]:
                self.state = 547
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [113]:
                    self.state = 544
                    self.match(SQLiteParser.PRIMARY_)
                    self.state = 545
                    self.match(SQLiteParser.KEY_)
                    pass
                elif token in [140]:
                    self.state = 546
                    self.match(SQLiteParser.UNIQUE_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 549
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 550
                self.indexed_column()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 551
                    self.match(SQLiteParser.COMMA)
                    self.state = 552
                    self.indexed_column()
                    self.state = 557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 558
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 559
                    self.conflict_clause()


                pass
            elif token in [44]:
                self.state = 562
                self.match(SQLiteParser.CHECK_)
                self.state = 563
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 564
                self.expr(0)
                self.state = 565
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [74]:
                self.state = 567
                self.match(SQLiteParser.FOREIGN_)
                self.state = 568
                self.match(SQLiteParser.KEY_)
                self.state = 569
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 570
                self.column_name()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 571
                    self.match(SQLiteParser.COMMA)
                    self.state = 572
                    self.column_name()
                    self.state = 577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 578
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 579
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCES_(self):
            return self.getToken(SQLiteParser.REFERENCES_, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ON_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ON_)
            else:
                return self.getToken(SQLiteParser.ON_, i)

        def MATCH_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.MATCH_)
            else:
                return self.getToken(SQLiteParser.MATCH_, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def DEFERRABLE_(self):
            return self.getToken(SQLiteParser.DEFERRABLE_, 0)

        def DELETE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DELETE_)
            else:
                return self.getToken(SQLiteParser.DELETE_, i)

        def UPDATE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UPDATE_)
            else:
                return self.getToken(SQLiteParser.UPDATE_, i)

        def SET_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SET_)
            else:
                return self.getToken(SQLiteParser.SET_, i)

        def CASCADE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CASCADE_)
            else:
                return self.getToken(SQLiteParser.CASCADE_, i)

        def RESTRICT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.RESTRICT_)
            else:
                return self.getToken(SQLiteParser.RESTRICT_, i)

        def NO_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NO_)
            else:
                return self.getToken(SQLiteParser.NO_, i)

        def ACTION_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ACTION_)
            else:
                return self.getToken(SQLiteParser.ACTION_, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NULL_)
            else:
                return self.getToken(SQLiteParser.NULL_, i)

        def DEFAULT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DEFAULT_)
            else:
                return self.getToken(SQLiteParser.DEFAULT_, i)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def INITIALLY_(self):
            return self.getToken(SQLiteParser.INITIALLY_, 0)

        def DEFERRED_(self):
            return self.getToken(SQLiteParser.DEFERRED_, 0)

        def IMMEDIATE_(self):
            return self.getToken(SQLiteParser.IMMEDIATE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = SQLiteParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(SQLiteParser.REFERENCES_)
            self.state = 584
            self.foreign_table()
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 585
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 586
                self.column_name()
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 587
                    self.match(SQLiteParser.COMMA)
                    self.state = 588
                    self.column_name()
                    self.state = 593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 594
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==99 or _la==107:
                self.state = 610
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [107]:
                    self.state = 598
                    self.match(SQLiteParser.ON_)
                    self.state = 599
                    _la = self._input.LA(1)
                    if not(_la==59 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 606
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [131]:
                        self.state = 600
                        self.match(SQLiteParser.SET_)
                        self.state = 601
                        _la = self._input.LA(1)
                        if not(_la==56 or _la==104):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [41]:
                        self.state = 602
                        self.match(SQLiteParser.CASCADE_)
                        pass
                    elif token in [123]:
                        self.state = 603
                        self.match(SQLiteParser.RESTRICT_)
                        pass
                    elif token in [101]:
                        self.state = 604
                        self.match(SQLiteParser.NO_)
                        self.state = 605
                        self.match(SQLiteParser.ACTION_)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [99]:
                    self.state = 608
                    self.match(SQLiteParser.MATCH_)
                    self.state = 609
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 615
                    self.match(SQLiteParser.NOT_)


                self.state = 618
                self.match(SQLiteParser.DEFERRABLE_)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 619
                    self.match(SQLiteParser.INITIALLY_)
                    self.state = 620
                    _la = self._input.LA(1)
                    if not(_la==58 or _la==82):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def CONFLICT_(self):
            return self.getToken(SQLiteParser.CONFLICT_, 0)

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = SQLiteParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(SQLiteParser.ON_)
            self.state = 626
            self.match(SQLiteParser.CONFLICT_)
            self.state = 627
            _la = self._input.LA(1)
            if not(_la==25 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 19140298416325121) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_trigger_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def TRIGGER_(self):
            return self.getToken(SQLiteParser.TRIGGER_, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def BEGIN_(self):
            return self.getToken(SQLiteParser.BEGIN_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def INSERT_(self):
            return self.getToken(SQLiteParser.INSERT_, 0)

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def BEFORE_(self):
            return self.getToken(SQLiteParser.BEFORE_, 0)

        def AFTER_(self):
            return self.getToken(SQLiteParser.AFTER_, 0)

        def INSTEAD_(self):
            return self.getToken(SQLiteParser.INSTEAD_, 0)

        def OF_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OF_)
            else:
                return self.getToken(SQLiteParser.OF_, i)

        def FOR_(self):
            return self.getToken(SQLiteParser.FOR_, 0)

        def EACH_(self):
            return self.getToken(SQLiteParser.EACH_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def WHEN_(self):
            return self.getToken(SQLiteParser.WHEN_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def update_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,i)


        def insert_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,i)


        def delete_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,i)


        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_trigger_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger_stmt" ):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger_stmt" ):
                listener.exitCreate_trigger_stmt(self)




    def create_trigger_stmt(self):

        localctx = SQLiteParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(SQLiteParser.CREATE_)
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==134:
                self.state = 630
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 633
            self.match(SQLiteParser.TRIGGER_)
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 634
                self.match(SQLiteParser.IF_)
                self.state = 635
                self.match(SQLiteParser.NOT_)
                self.state = 636
                self.match(SQLiteParser.EXISTS_)


            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 639
                self.schema_name()
                self.state = 640
                self.match(SQLiteParser.DOT)


            self.state = 644
            self.trigger_name()
            self.state = 649
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.state = 645
                self.match(SQLiteParser.BEFORE_)
                pass
            elif token in [28]:
                self.state = 646
                self.match(SQLiteParser.AFTER_)
                pass
            elif token in [89]:
                self.state = 647
                self.match(SQLiteParser.INSTEAD_)
                self.state = 648
                self.match(SQLiteParser.OF_)
                pass
            elif token in [59, 88, 141]:
                pass
            else:
                pass
            self.state = 665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.state = 651
                self.match(SQLiteParser.DELETE_)
                pass
            elif token in [88]:
                self.state = 652
                self.match(SQLiteParser.INSERT_)
                pass
            elif token in [141]:
                self.state = 653
                self.match(SQLiteParser.UPDATE_)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 654
                    self.match(SQLiteParser.OF_)
                    self.state = 655
                    self.column_name()
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 656
                        self.match(SQLiteParser.COMMA)
                        self.state = 657
                        self.column_name()
                        self.state = 662
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

            self.state = 667
            self.match(SQLiteParser.ON_)
            self.state = 668
            self.table_name()
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 669
                self.match(SQLiteParser.FOR_)
                self.state = 670
                self.match(SQLiteParser.EACH_)
                self.state = 671
                self.match(SQLiteParser.ROW_)


            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 674
                self.match(SQLiteParser.WHEN_)
                self.state = 675
                self.expr(0)


            self.state = 678
            self.match(SQLiteParser.BEGIN_)
            self.state = 687 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 679
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 680
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 681
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 682
                    self.select_stmt()
                    pass


                self.state = 685
                self.match(SQLiteParser.SCOL)
                self.state = 689 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==59 or (((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 2386912217732743169) != 0):
                    break

            self.state = 691
            self.match(SQLiteParser.END_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_view_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def VIEW_(self):
            return self.getToken(SQLiteParser.VIEW_, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_view_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view_stmt" ):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view_stmt" ):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = SQLiteParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(SQLiteParser.CREATE_)
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==134:
                self.state = 694
                _la = self._input.LA(1)
                if not(_la==133 or _la==134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 697
            self.match(SQLiteParser.VIEW_)
            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 698
                self.match(SQLiteParser.IF_)
                self.state = 699
                self.match(SQLiteParser.NOT_)
                self.state = 700
                self.match(SQLiteParser.EXISTS_)


            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 703
                self.schema_name()
                self.state = 704
                self.match(SQLiteParser.DOT)


            self.state = 708
            self.view_name()
            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 709
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 710
                self.column_name()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 711
                    self.match(SQLiteParser.COMMA)
                    self.state = 712
                    self.column_name()
                    self.state = 717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 718
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 722
            self.match(SQLiteParser.AS_)
            self.state = 723
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_virtual_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def VIRTUAL_(self):
            return self.getToken(SQLiteParser.VIRTUAL_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def USING_(self):
            return self.getToken(SQLiteParser.USING_, 0)

        def module_name(self):
            return self.getTypedRuleContext(SQLiteParser.Module_nameContext,0)


        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def module_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Module_argumentContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_virtual_table_stmt" ):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_virtual_table_stmt" ):
                listener.exitCreate_virtual_table_stmt(self)




    def create_virtual_table_stmt(self):

        localctx = SQLiteParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(SQLiteParser.CREATE_)
            self.state = 726
            self.match(SQLiteParser.VIRTUAL_)
            self.state = 727
            self.match(SQLiteParser.TABLE_)
            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 728
                self.match(SQLiteParser.IF_)
                self.state = 729
                self.match(SQLiteParser.NOT_)
                self.state = 730
                self.match(SQLiteParser.EXISTS_)


            self.state = 736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 733
                self.schema_name()
                self.state = 734
                self.match(SQLiteParser.DOT)


            self.state = 738
            self.table_name()
            self.state = 739
            self.match(SQLiteParser.USING_)
            self.state = 740
            self.module_name()
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 741
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 742
                self.module_argument()
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 743
                    self.match(SQLiteParser.COMMA)
                    self.state = 744
                    self.module_argument()
                    self.state = 749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 750
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(SQLiteParser.WITH_, 0)

        def cte_table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,i)


        def AS_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS_)
            else:
                return self.getToken(SQLiteParser.AS_, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def RECURSIVE_(self):
            return self.getToken(SQLiteParser.RECURSIVE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(SQLiteParser.WITH_)
            self.state = 756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 755
                self.match(SQLiteParser.RECURSIVE_)


            self.state = 758
            self.cte_table_name()
            self.state = 759
            self.match(SQLiteParser.AS_)
            self.state = 760
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 761
            self.select_stmt()
            self.state = 762
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 763
                self.match(SQLiteParser.COMMA)
                self.state = 764
                self.cte_table_name()
                self.state = 765
                self.match(SQLiteParser.AS_)
                self.state = 766
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 767
                self.select_stmt()
                self.state = 768
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_cte_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_table_name" ):
                listener.enterCte_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_table_name" ):
                listener.exitCte_table_name(self)




    def cte_table_name(self):

        localctx = SQLiteParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_cte_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.table_name()
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 776
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 777
                self.column_name()
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 778
                    self.match(SQLiteParser.COMMA)
                    self.state = 779
                    self.column_name()
                    self.state = 784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 785
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cte_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def initial_select(self):
            return self.getTypedRuleContext(SQLiteParser.Initial_selectContext,0)


        def UNION_(self):
            return self.getToken(SQLiteParser.UNION_, 0)

        def recursive_select(self):
            return self.getTypedRuleContext(SQLiteParser.Recursive_selectContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte" ):
                listener.enterRecursive_cte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte" ):
                listener.exitRecursive_cte(self)




    def recursive_cte(self):

        localctx = SQLiteParser.Recursive_cteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_recursive_cte)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.cte_table_name()
            self.state = 790
            self.match(SQLiteParser.AS_)
            self.state = 791
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 792
            self.initial_select()
            self.state = 793
            self.match(SQLiteParser.UNION_)
            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 794
                self.match(SQLiteParser.ALL_)


            self.state = 797
            self.recursive_select()
            self.state = 798
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.table_name()
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 801
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 802
                self.column_name()
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 803
                    self.match(SQLiteParser.COMMA)
                    self.state = 804
                    self.column_name()
                    self.state = 809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 810
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 814
            self.match(SQLiteParser.AS_)
            self.state = 815
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 816
            self.select_stmt()
            self.state = 817
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 819
                self.with_clause()


            self.state = 822
            self.match(SQLiteParser.DELETE_)
            self.state = 823
            self.match(SQLiteParser.FROM_)
            self.state = 824
            self.qualified_table_name()
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 825
                self.match(SQLiteParser.WHERE_)
                self.state = 826
                self.expr(0)


            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 829
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt_limited" ):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt_limited" ):
                listener.exitDelete_stmt_limited(self)




    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 832
                self.with_clause()


            self.state = 835
            self.match(SQLiteParser.DELETE_)
            self.state = 836
            self.match(SQLiteParser.FROM_)
            self.state = 837
            self.qualified_table_name()
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 838
                self.match(SQLiteParser.WHERE_)
                self.state = 839
                self.expr(0)


            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 842
                self.returning_clause()


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98 or _la==109:
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109:
                    self.state = 845
                    self.order_by_stmt()


                self.state = 848
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Detach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETACH_(self):
            return self.getToken(SQLiteParser.DETACH_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE_(self):
            return self.getToken(SQLiteParser.DATABASE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetach_stmt" ):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetach_stmt" ):
                listener.exitDetach_stmt(self)




    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(SQLiteParser.DETACH_)
            self.state = 853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 852
                self.match(SQLiteParser.DATABASE_)


            self.state = 855
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.object_ = None # Token

        def DROP_(self):
            return self.getToken(SQLiteParser.DROP_, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def INDEX_(self):
            return self.getToken(SQLiteParser.INDEX_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def TRIGGER_(self):
            return self.getToken(SQLiteParser.TRIGGER_, 0)

        def VIEW_(self):
            return self.getToken(SQLiteParser.VIEW_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stmt" ):
                listener.enterDrop_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stmt" ):
                listener.exitDrop_stmt(self)




    def drop_stmt(self):

        localctx = SQLiteParser.Drop_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_drop_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(SQLiteParser.DROP_)
            self.state = 858
            localctx.object_ = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 2324138882699886593) != 0):
                localctx.object_ = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 859
                self.match(SQLiteParser.IF_)
                self.state = 860
                self.match(SQLiteParser.EXISTS_)


            self.state = 866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 863
                self.schema_name()
                self.state = 864
                self.match(SQLiteParser.DOT)


            self.state = 868
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Over_clauseContext,0)


        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def CAST_(self):
            return self.getToken(SQLiteParser.CAST_, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def CASE_(self):
            return self.getToken(SQLiteParser.CASE_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def WHEN_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHEN_)
            else:
                return self.getToken(SQLiteParser.WHEN_, i)

        def THEN_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.THEN_)
            else:
                return self.getToken(SQLiteParser.THEN_, i)

        def ELSE_(self):
            return self.getToken(SQLiteParser.ELSE_, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext,0)


        def PIPE2(self):
            return self.getToken(SQLiteParser.PIPE2, 0)

        def DIV(self):
            return self.getToken(SQLiteParser.DIV, 0)

        def MOD(self):
            return self.getToken(SQLiteParser.MOD, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def LT2(self):
            return self.getToken(SQLiteParser.LT2, 0)

        def GT2(self):
            return self.getToken(SQLiteParser.GT2, 0)

        def AMP(self):
            return self.getToken(SQLiteParser.AMP, 0)

        def PIPE(self):
            return self.getToken(SQLiteParser.PIPE, 0)

        def LT(self):
            return self.getToken(SQLiteParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(SQLiteParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(SQLiteParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(SQLiteParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(SQLiteParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(SQLiteParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(SQLiteParser.NOT_EQ2, 0)

        def IS_(self):
            return self.getToken(SQLiteParser.IS_, 0)

        def IN_(self):
            return self.getToken(SQLiteParser.IN_, 0)

        def LIKE_(self):
            return self.getToken(SQLiteParser.LIKE_, 0)

        def GLOB_(self):
            return self.getToken(SQLiteParser.GLOB_, 0)

        def MATCH_(self):
            return self.getToken(SQLiteParser.MATCH_, 0)

        def REGEXP_(self):
            return self.getToken(SQLiteParser.REGEXP_, 0)

        def AND_(self):
            return self.getToken(SQLiteParser.AND_, 0)

        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def BETWEEN_(self):
            return self.getToken(SQLiteParser.BETWEEN_, 0)

        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def ESCAPE_(self):
            return self.getToken(SQLiteParser.ESCAPE_, 0)

        def ISNULL_(self):
            return self.getToken(SQLiteParser.ISNULL_, 0)

        def NOTNULL_(self):
            return self.getToken(SQLiteParser.NOTNULL_, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 871
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 872
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 881
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 876
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                    if la_ == 1:
                        self.state = 873
                        self.schema_name()
                        self.state = 874
                        self.match(SQLiteParser.DOT)


                    self.state = 878
                    self.table_name()
                    self.state = 879
                    self.match(SQLiteParser.DOT)


                self.state = 883
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 884
                self.unary_operator()
                self.state = 885
                self.expr(21)
                pass

            elif la_ == 5:
                self.state = 887
                self.function_name()
                self.state = 888
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 901
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 8, 9, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 186, 187, 188, 189]:
                    self.state = 890
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                    if la_ == 1:
                        self.state = 889
                        self.match(SQLiteParser.DISTINCT_)


                    self.state = 892
                    self.expr(0)
                    self.state = 897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 893
                        self.match(SQLiteParser.COMMA)
                        self.state = 894
                        self.expr(0)
                        self.state = 899
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [7]:
                    self.state = 900
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [4]:
                    pass
                else:
                    pass
                self.state = 903
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 904
                    self.filter_clause()


                self.state = 908
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 907
                    self.over_clause()


                pass

            elif la_ == 6:
                self.state = 910
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 911
                self.expr(0)
                self.state = 916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 912
                    self.match(SQLiteParser.COMMA)
                    self.state = 913
                    self.expr(0)
                    self.state = 918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 919
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 921
                self.match(SQLiteParser.CAST_)
                self.state = 922
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 923
                self.expr(0)
                self.state = 924
                self.match(SQLiteParser.AS_)
                self.state = 925
                self.type_name()
                self.state = 926
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70 or _la==102:
                    self.state = 929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==102:
                        self.state = 928
                        self.match(SQLiteParser.NOT_)


                    self.state = 931
                    self.match(SQLiteParser.EXISTS_)


                self.state = 934
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 935
                self.select_stmt()
                self.state = 936
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 938
                self.match(SQLiteParser.CASE_)
                self.state = 940
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 939
                    self.expr(0)


                self.state = 947 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 942
                    self.match(SQLiteParser.WHEN_)
                    self.state = 943
                    self.expr(0)
                    self.state = 944
                    self.match(SQLiteParser.THEN_)
                    self.state = 945
                    self.expr(0)
                    self.state = 949 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==147):
                        break

                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 951
                    self.match(SQLiteParser.ELSE_)
                    self.state = 952
                    self.expr(0)


                self.state = 955
                self.match(SQLiteParser.END_)
                pass

            elif la_ == 10:
                self.state = 957
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1079
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1077
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 960
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 961
                        self.match(SQLiteParser.PIPE2)
                        self.state = 962
                        self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 963
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 964
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 12416) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 965
                        self.expr(20)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 966
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 967
                        _la = self._input.LA(1)
                        if not(_la==8 or _la==9):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 968
                        self.expr(19)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 969
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 970
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 245760) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 971
                        self.expr(18)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 972
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 973
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 3932160) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 974
                        self.expr(17)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 975
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 988
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                        if la_ == 1:
                            self.state = 976
                            self.match(SQLiteParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 977
                            self.match(SQLiteParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 978
                            self.match(SQLiteParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 979
                            self.match(SQLiteParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 980
                            self.match(SQLiteParser.IS_)
                            pass

                        elif la_ == 6:
                            self.state = 981
                            self.match(SQLiteParser.IS_)
                            self.state = 982
                            self.match(SQLiteParser.NOT_)
                            pass

                        elif la_ == 7:
                            self.state = 983
                            self.match(SQLiteParser.IN_)
                            pass

                        elif la_ == 8:
                            self.state = 984
                            self.match(SQLiteParser.LIKE_)
                            pass

                        elif la_ == 9:
                            self.state = 985
                            self.match(SQLiteParser.GLOB_)
                            pass

                        elif la_ == 10:
                            self.state = 986
                            self.match(SQLiteParser.MATCH_)
                            pass

                        elif la_ == 11:
                            self.state = 987
                            self.match(SQLiteParser.REGEXP_)
                            pass


                        self.state = 990
                        self.expr(16)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 991
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 992
                        self.match(SQLiteParser.AND_)
                        self.state = 993
                        self.expr(15)
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 994
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 995
                        self.match(SQLiteParser.OR_)
                        self.state = 996
                        self.expr(14)
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 997
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 998
                        self.match(SQLiteParser.IS_)
                        self.state = 1000
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                        if la_ == 1:
                            self.state = 999
                            self.match(SQLiteParser.NOT_)


                        self.state = 1002
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1003
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1005
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==102:
                            self.state = 1004
                            self.match(SQLiteParser.NOT_)


                        self.state = 1007
                        self.match(SQLiteParser.BETWEEN_)
                        self.state = 1008
                        self.expr(0)
                        self.state = 1009
                        self.match(SQLiteParser.AND_)
                        self.state = 1010
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1012
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1013
                        self.match(SQLiteParser.COLLATE_)
                        self.state = 1014
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1015
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1017
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==102:
                            self.state = 1016
                            self.match(SQLiteParser.NOT_)


                        self.state = 1019
                        _la = self._input.LA(1)
                        if not((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 2199028498433) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1020
                        self.expr(0)
                        self.state = 1023
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                        if la_ == 1:
                            self.state = 1021
                            self.match(SQLiteParser.ESCAPE_)
                            self.state = 1022
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1025
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1030
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [93]:
                            self.state = 1026
                            self.match(SQLiteParser.ISNULL_)
                            pass
                        elif token in [103]:
                            self.state = 1027
                            self.match(SQLiteParser.NOTNULL_)
                            pass
                        elif token in [102]:
                            self.state = 1028
                            self.match(SQLiteParser.NOT_)
                            self.state = 1029
                            self.match(SQLiteParser.NULL_)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1032
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1034
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==102:
                            self.state = 1033
                            self.match(SQLiteParser.NOT_)


                        self.state = 1036
                        self.match(SQLiteParser.IN_)
                        self.state = 1075
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                        if la_ == 1:
                            self.state = 1037
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1047
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                            if la_ == 1:
                                self.state = 1038
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1039
                                self.expr(0)
                                self.state = 1044
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==5:
                                    self.state = 1040
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1041
                                    self.expr(0)
                                    self.state = 1046
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1049
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1053
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                            if la_ == 1:
                                self.state = 1050
                                self.schema_name()
                                self.state = 1051
                                self.match(SQLiteParser.DOT)


                            self.state = 1055
                            self.table_name()
                            pass

                        elif la_ == 3:
                            self.state = 1059
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                            if la_ == 1:
                                self.state = 1056
                                self.schema_name()
                                self.state = 1057
                                self.match(SQLiteParser.DOT)


                            self.state = 1061
                            self.table_function_name()
                            self.state = 1062
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1071
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -33552632) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921504606846977) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4476578029606273023) != 0:
                                self.state = 1063
                                self.expr(0)
                                self.state = 1068
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==5:
                                    self.state = 1064
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1065
                                    self.expr(0)
                                    self.state = 1070
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1073
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass


                        pass

             
                self.state = 1081
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Raise_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE_(self):
            return self.getToken(SQLiteParser.RAISE_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_function" ):
                listener.enterRaise_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_function" ):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(SQLiteParser.RAISE_)
            self.state = 1083
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1088
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81]:
                self.state = 1084
                self.match(SQLiteParser.IGNORE_)
                pass
            elif token in [25, 72, 126]:
                self.state = 1085
                _la = self._input.LA(1)
                if not(_la==25 or _la==72 or _la==126):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1086
                self.match(SQLiteParser.COMMA)
                self.state = 1087
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1090
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def CURRENT_TIME_(self):
            return self.getToken(SQLiteParser.CURRENT_TIME_, 0)

        def CURRENT_DATE_(self):
            return self.getToken(SQLiteParser.CURRENT_DATE_, 0)

        def CURRENT_TIMESTAMP_(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            _la = self._input.LA(1)
            if not((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & 4503599627370503) != 0 or (((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & 212995) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO_(self):
            return self.getToken(SQLiteParser.INTO_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def INSERT_(self):
            return self.getToken(SQLiteParser.INSERT_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def DEFAULT_(self):
            return self.getToken(SQLiteParser.DEFAULT_, 0)

        def VALUES_(self):
            return self.getToken(SQLiteParser.VALUES_, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def upsert_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Upsert_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1094
                self.with_clause()


            self.state = 1102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1097
                self.match(SQLiteParser.INSERT_)
                pass

            elif la_ == 2:
                self.state = 1098
                self.match(SQLiteParser.REPLACE_)
                pass

            elif la_ == 3:
                self.state = 1099
                self.match(SQLiteParser.INSERT_)
                self.state = 1100
                self.match(SQLiteParser.OR_)
                self.state = 1101
                _la = self._input.LA(1)
                if not(_la==25 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 19140298416325121) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


            self.state = 1104
            self.match(SQLiteParser.INTO_)
            self.state = 1108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1105
                self.schema_name()
                self.state = 1106
                self.match(SQLiteParser.DOT)


            self.state = 1110
            self.table_name()
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 1111
                self.match(SQLiteParser.AS_)
                self.state = 1112
                self.table_alias()


            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 1115
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1116
                self.column_name()
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1117
                    self.match(SQLiteParser.COMMA)
                    self.state = 1118
                    self.column_name()
                    self.state = 1123
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1124
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 1164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130, 144, 149]:
                self.state = 1157
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 1128
                    self.match(SQLiteParser.VALUES_)
                    self.state = 1129
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1130
                    self.expr(0)
                    self.state = 1135
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1131
                        self.match(SQLiteParser.COMMA)
                        self.state = 1132
                        self.expr(0)
                        self.state = 1137
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1138
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1153
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1139
                        self.match(SQLiteParser.COMMA)
                        self.state = 1140
                        self.match(SQLiteParser.OPEN_PAR)
                        self.state = 1141
                        self.expr(0)
                        self.state = 1146
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 1142
                            self.match(SQLiteParser.COMMA)
                            self.state = 1143
                            self.expr(0)
                            self.state = 1148
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1149
                        self.match(SQLiteParser.CLOSE_PAR)
                        self.state = 1155
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1156
                    self.select_stmt()
                    pass


                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 1159
                    self.upsert_clause()


                pass
            elif token in [56]:
                self.state = 1162
                self.match(SQLiteParser.DEFAULT_)
                self.state = 1163
                self.match(SQLiteParser.VALUES_)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 1166
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returning_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING_(self):
            return self.getToken(SQLiteParser.RETURNING_, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturning_clause" ):
                listener.enterReturning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturning_clause" ):
                listener.exitReturning_clause(self)




    def returning_clause(self):

        localctx = SQLiteParser.Returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.match(SQLiteParser.RETURNING_)
            self.state = 1170
            self.result_column()
            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1171
                self.match(SQLiteParser.COMMA)
                self.state = 1172
                self.result_column()
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upsert_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def CONFLICT_(self):
            return self.getToken(SQLiteParser.CONFLICT_, 0)

        def DO_(self):
            return self.getToken(SQLiteParser.DO_, 0)

        def NOTHING_(self):
            return self.getToken(SQLiteParser.NOTHING_, 0)

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHERE_)
            else:
                return self.getToken(SQLiteParser.WHERE_, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_upsert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpsert_clause" ):
                listener.enterUpsert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpsert_clause" ):
                listener.exitUpsert_clause(self)




    def upsert_clause(self):

        localctx = SQLiteParser.Upsert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_upsert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.match(SQLiteParser.ON_)
            self.state = 1179
            self.match(SQLiteParser.CONFLICT_)
            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 1180
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1181
                self.indexed_column()
                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1182
                    self.match(SQLiteParser.COMMA)
                    self.state = 1183
                    self.indexed_column()
                    self.state = 1188
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1189
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 1190
                    self.match(SQLiteParser.WHERE_)
                    self.state = 1191
                    self.expr(0)




            self.state = 1196
            self.match(SQLiteParser.DO_)
            self.state = 1223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [184]:
                self.state = 1197
                self.match(SQLiteParser.NOTHING_)
                pass
            elif token in [141]:
                self.state = 1198
                self.match(SQLiteParser.UPDATE_)
                self.state = 1199
                self.match(SQLiteParser.SET_)

                self.state = 1202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1200
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1201
                    self.column_name_list()
                    pass


                self.state = 1204
                self.match(SQLiteParser.ASSIGN)
                self.state = 1205
                self.expr(0)
                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1206
                    self.match(SQLiteParser.COMMA)
                    self.state = 1209
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1207
                        self.column_name()
                        pass

                    elif la_ == 2:
                        self.state = 1208
                        self.column_name_list()
                        pass


                    self.state = 1211
                    self.match(SQLiteParser.ASSIGN)
                    self.state = 1212
                    self.expr(0)
                    self.state = 1218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 1219
                    self.match(SQLiteParser.WHERE_)
                    self.state = 1220
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA_(self):
            return self.getToken(SQLiteParser.PRAGMA_, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_stmt" ):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_stmt" ):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(SQLiteParser.PRAGMA_)
            self.state = 1229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1226
                self.schema_name()
                self.state = 1227
                self.match(SQLiteParser.DOT)


            self.state = 1231
            self.pragma_name()
            self.state = 1238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.state = 1232
                self.match(SQLiteParser.ASSIGN)
                self.state = 1233
                self.pragma_value()
                pass
            elif token in [3]:
                self.state = 1234
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1235
                self.pragma_value()
                self.state = 1236
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [-1, 1, 30, 31, 35, 38, 47, 50, 59, 61, 63, 66, 71, 88, 112, 119, 120, 122, 126, 129, 130, 141, 143, 144, 149]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_value" ):
                listener.enterPragma_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_value" ):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pragma_value)
        try:
            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1240
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1242
                self.match(SQLiteParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REINDEX_(self):
            return self.getToken(SQLiteParser.REINDEX_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)




    def reindex_stmt(self):

        localctx = SQLiteParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(SQLiteParser.REINDEX_)
            self.state = 1256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1246
                self.collation_name()

            elif la_ == 2:
                self.state = 1250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1247
                    self.schema_name()
                    self.state = 1248
                    self.match(SQLiteParser.DOT)


                self.state = 1254
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1252
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 1253
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1258
                self.common_table_stmt()


            self.state = 1261
            self.select_core()
            self.state = 1267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1262
                    self.compound_operator()
                    self.state = 1263
                    self.select_core() 
                self.state = 1269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 1270
                self.order_by_stmt()


            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 1273
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.table_or_subquery()
            self.state = 1284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5 or _la==51 or (((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 8833) != 0:
                self.state = 1277
                self.join_operator()
                self.state = 1278
                self.table_or_subquery()
                self.state = 1280
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1279
                    self.join_constraint()


                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT_(self):
            return self.getToken(SQLiteParser.SELECT_, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def GROUP_(self):
            return self.getToken(SQLiteParser.GROUP_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def WINDOW_(self):
            return self.getToken(SQLiteParser.WINDOW_, 0)

        def window_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_nameContext,i)


        def AS_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS_)
            else:
                return self.getToken(SQLiteParser.AS_, i)

        def window_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_defnContext,i)


        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def HAVING_(self):
            return self.getToken(SQLiteParser.HAVING_, 0)

        def VALUES_(self):
            return self.getToken(SQLiteParser.VALUES_, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1287
                self.match(SQLiteParser.SELECT_)
                self.state = 1289
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1288
                    _la = self._input.LA(1)
                    if not(_la==29 or _la==62):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1291
                self.result_column()
                self.state = 1296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1292
                    self.match(SQLiteParser.COMMA)
                    self.state = 1293
                    self.result_column()
                    self.state = 1298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 1299
                    self.match(SQLiteParser.FROM_)
                    self.state = 1309
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                    if la_ == 1:
                        self.state = 1300
                        self.table_or_subquery()
                        self.state = 1305
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 1301
                            self.match(SQLiteParser.COMMA)
                            self.state = 1302
                            self.table_or_subquery()
                            self.state = 1307
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1308
                        self.join_clause()
                        pass




                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 1313
                    self.match(SQLiteParser.WHERE_)
                    self.state = 1314
                    self.expr(0)


                self.state = 1331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 1317
                    self.match(SQLiteParser.GROUP_)
                    self.state = 1318
                    self.match(SQLiteParser.BY_)
                    self.state = 1319
                    self.expr(0)
                    self.state = 1324
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1320
                        self.match(SQLiteParser.COMMA)
                        self.state = 1321
                        self.expr(0)
                        self.state = 1326
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==79:
                        self.state = 1327
                        self.match(SQLiteParser.HAVING_)
                        self.state = 1328
                        self.expr(0)




                self.state = 1347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==174:
                    self.state = 1333
                    self.match(SQLiteParser.WINDOW_)
                    self.state = 1334
                    self.window_name()
                    self.state = 1335
                    self.match(SQLiteParser.AS_)
                    self.state = 1336
                    self.window_defn()
                    self.state = 1344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1337
                        self.match(SQLiteParser.COMMA)
                        self.state = 1338
                        self.window_name()
                        self.state = 1339
                        self.match(SQLiteParser.AS_)
                        self.state = 1340
                        self.window_defn()
                        self.state = 1346
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1349
                self.match(SQLiteParser.VALUES_)
                self.state = 1350
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1351
                self.expr(0)
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1352
                    self.match(SQLiteParser.COMMA)
                    self.state = 1353
                    self.expr(0)
                    self.state = 1358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1359
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1360
                    self.match(SQLiteParser.COMMA)
                    self.state = 1361
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1362
                    self.expr(0)
                    self.state = 1367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1363
                        self.match(SQLiteParser.COMMA)
                        self.state = 1364
                        self.expr(0)
                        self.state = 1369
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1370
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1376
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_factored_select_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext,0)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1381
                self.common_table_stmt()


            self.state = 1384
            self.select_core()
            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 1385
                self.order_by_stmt()


            self.state = 1389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 1388
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def UNION_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UNION_)
            else:
                return self.getToken(SQLiteParser.UNION_, i)

        def INTERSECT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.INTERSECT_)
            else:
                return self.getToken(SQLiteParser.INTERSECT_, i)

        def EXCEPT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.EXCEPT_)
            else:
                return self.getToken(SQLiteParser.EXCEPT_, i)

        def ALL_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ALL_)
            else:
                return self.getToken(SQLiteParser.ALL_, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1391
                self.common_table_stmt()


            self.state = 1394
            self.select_core()
            self.state = 1404 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1401
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [139]:
                    self.state = 1395
                    self.match(SQLiteParser.UNION_)
                    self.state = 1397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==29:
                        self.state = 1396
                        self.match(SQLiteParser.ALL_)


                    pass
                elif token in [90]:
                    self.state = 1399
                    self.match(SQLiteParser.INTERSECT_)
                    pass
                elif token in [68]:
                    self.state = 1400
                    self.match(SQLiteParser.EXCEPT_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1403
                self.select_core()
                self.state = 1406 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==68 or _la==90 or _la==139):
                    break

            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 1408
                self.order_by_stmt()


            self.state = 1412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 1411
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def INDEXED_(self):
            return self.getToken(SQLiteParser.INDEXED_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1414
                    self.schema_name()
                    self.state = 1415
                    self.match(SQLiteParser.DOT)


                self.state = 1419
                self.table_name()
                self.state = 1424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1421
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                    if la_ == 1:
                        self.state = 1420
                        self.match(SQLiteParser.AS_)


                    self.state = 1423
                    self.table_alias()


                self.state = 1431
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [85]:
                    self.state = 1426
                    self.match(SQLiteParser.INDEXED_)
                    self.state = 1427
                    self.match(SQLiteParser.BY_)
                    self.state = 1428
                    self.index_name()
                    pass
                elif token in [102]:
                    self.state = 1429
                    self.match(SQLiteParser.NOT_)
                    self.state = 1430
                    self.match(SQLiteParser.INDEXED_)
                    pass
                elif token in [-1, 1, 4, 5, 30, 31, 35, 38, 47, 50, 51, 59, 61, 63, 66, 68, 71, 78, 87, 88, 90, 94, 96, 98, 100, 107, 109, 112, 119, 120, 122, 124, 126, 129, 130, 139, 141, 142, 143, 144, 148, 149, 174]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1436
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1433
                    self.schema_name()
                    self.state = 1434
                    self.match(SQLiteParser.DOT)


                self.state = 1438
                self.table_function_name()
                self.state = 1439
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1440
                self.expr(0)
                self.state = 1445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1441
                    self.match(SQLiteParser.COMMA)
                    self.state = 1442
                    self.expr(0)
                    self.state = 1447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1448
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1450
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                    if la_ == 1:
                        self.state = 1449
                        self.match(SQLiteParser.AS_)


                    self.state = 1452
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1455
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                if la_ == 1:
                    self.state = 1456
                    self.table_or_subquery()
                    self.state = 1461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1457
                        self.match(SQLiteParser.COMMA)
                        self.state = 1458
                        self.table_or_subquery()
                        self.state = 1463
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1464
                    self.join_clause()
                    pass


                self.state = 1467
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1469
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1470
                self.select_stmt()
                self.state = 1471
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1476
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1473
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                    if la_ == 1:
                        self.state = 1472
                        self.match(SQLiteParser.AS_)


                    self.state = 1475
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1480
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1481
                self.table_name()
                self.state = 1482
                self.match(SQLiteParser.DOT)
                self.state = 1483
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1485
                self.expr(0)
                self.state = 1490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33 or _la==185 or _la==188:
                    self.state = 1487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==33:
                        self.state = 1486
                        self.match(SQLiteParser.AS_)


                    self.state = 1489
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def JOIN_(self):
            return self.getToken(SQLiteParser.JOIN_, 0)

        def NATURAL_(self):
            return self.getToken(SQLiteParser.NATURAL_, 0)

        def LEFT_(self):
            return self.getToken(SQLiteParser.LEFT_, 0)

        def INNER_(self):
            return self.getToken(SQLiteParser.INNER_, 0)

        def CROSS_(self):
            return self.getToken(SQLiteParser.CROSS_, 0)

        def OUTER_(self):
            return self.getToken(SQLiteParser.OUTER_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1494
                self.match(SQLiteParser.COMMA)
                pass
            elif token in [51, 87, 94, 96, 100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 1495
                    self.match(SQLiteParser.NATURAL_)


                self.state = 1504
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [96]:
                    self.state = 1498
                    self.match(SQLiteParser.LEFT_)
                    self.state = 1500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==110:
                        self.state = 1499
                        self.match(SQLiteParser.OUTER_)


                    pass
                elif token in [87]:
                    self.state = 1502
                    self.match(SQLiteParser.INNER_)
                    pass
                elif token in [51]:
                    self.state = 1503
                    self.match(SQLiteParser.CROSS_)
                    pass
                elif token in [94]:
                    pass
                else:
                    pass
                self.state = 1506
                self.match(SQLiteParser.JOIN_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def USING_(self):
            return self.getToken(SQLiteParser.USING_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.state = 1523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1509
                self.match(SQLiteParser.ON_)
                self.state = 1510
                self.expr(0)
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1511
                self.match(SQLiteParser.USING_)
                self.state = 1512
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1513
                self.column_name()
                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1514
                    self.match(SQLiteParser.COMMA)
                    self.state = 1515
                    self.column_name()
                    self.state = 1520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1521
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION_(self):
            return self.getToken(SQLiteParser.UNION_, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def INTERSECT_(self):
            return self.getToken(SQLiteParser.INTERSECT_, 0)

        def EXCEPT_(self):
            return self.getToken(SQLiteParser.EXCEPT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_compound_operator)
        self._la = 0 # Token type
        try:
            self.state = 1531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1525
                self.match(SQLiteParser.UNION_)
                self.state = 1527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 1526
                    self.match(SQLiteParser.ALL_)


                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1529
                self.match(SQLiteParser.INTERSECT_)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1530
                self.match(SQLiteParser.EXCEPT_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1533
                self.with_clause()


            self.state = 1536
            self.match(SQLiteParser.UPDATE_)
            self.state = 1539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 1537
                self.match(SQLiteParser.OR_)
                self.state = 1538
                _la = self._input.LA(1)
                if not(_la==25 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 19140298416325121) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1541
            self.qualified_table_name()
            self.state = 1542
            self.match(SQLiteParser.SET_)
            self.state = 1545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1543
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1544
                self.column_name_list()
                pass


            self.state = 1547
            self.match(SQLiteParser.ASSIGN)
            self.state = 1548
            self.expr(0)
            self.state = 1559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1549
                self.match(SQLiteParser.COMMA)
                self.state = 1552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 1550
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1551
                    self.column_name_list()
                    pass


                self.state = 1554
                self.match(SQLiteParser.ASSIGN)
                self.state = 1555
                self.expr(0)
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 1562
                self.match(SQLiteParser.FROM_)
                self.state = 1572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1563
                    self.table_or_subquery()
                    self.state = 1568
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1564
                        self.match(SQLiteParser.COMMA)
                        self.state = 1565
                        self.table_or_subquery()
                        self.state = 1570
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1571
                    self.join_clause()
                    pass




            self.state = 1578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1576
                self.match(SQLiteParser.WHERE_)
                self.state = 1577
                self.expr(0)


            self.state = 1581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 1580
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)




    def column_name_list(self):

        localctx = SQLiteParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1584
            self.column_name()
            self.state = 1589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1585
                self.match(SQLiteParser.COMMA)
                self.state = 1586
                self.column_name()
                self.state = 1591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1592
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def returning_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Returning_clauseContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)




    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1594
                self.with_clause()


            self.state = 1597
            self.match(SQLiteParser.UPDATE_)
            self.state = 1600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 1598
                self.match(SQLiteParser.OR_)
                self.state = 1599
                _la = self._input.LA(1)
                if not(_la==25 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 19140298416325121) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1602
            self.qualified_table_name()
            self.state = 1603
            self.match(SQLiteParser.SET_)
            self.state = 1606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.state = 1604
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1605
                self.column_name_list()
                pass


            self.state = 1608
            self.match(SQLiteParser.ASSIGN)
            self.state = 1609
            self.expr(0)
            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1610
                self.match(SQLiteParser.COMMA)
                self.state = 1613
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1611
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1612
                    self.column_name_list()
                    pass


                self.state = 1615
                self.match(SQLiteParser.ASSIGN)
                self.state = 1616
                self.expr(0)
                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1623
                self.match(SQLiteParser.WHERE_)
                self.state = 1624
                self.expr(0)


            self.state = 1628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 1627
                self.returning_clause()


            self.state = 1634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98 or _la==109:
                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109:
                    self.state = 1630
                    self.order_by_stmt()


                self.state = 1633
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def alias(self):
            return self.getTypedRuleContext(SQLiteParser.AliasContext,0)


        def INDEXED_(self):
            return self.getToken(SQLiteParser.INDEXED_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_qualified_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 1636
                self.schema_name()
                self.state = 1637
                self.match(SQLiteParser.DOT)


            self.state = 1641
            self.table_name()
            self.state = 1644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 1642
                self.match(SQLiteParser.AS_)
                self.state = 1643
                self.alias()


            self.state = 1651
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.state = 1646
                self.match(SQLiteParser.INDEXED_)
                self.state = 1647
                self.match(SQLiteParser.BY_)
                self.state = 1648
                self.index_name()
                pass
            elif token in [102]:
                self.state = 1649
                self.match(SQLiteParser.NOT_)
                self.state = 1650
                self.match(SQLiteParser.INDEXED_)
                pass
            elif token in [-1, 1, 30, 31, 35, 38, 47, 50, 59, 61, 63, 66, 71, 88, 98, 109, 112, 119, 120, 122, 124, 126, 129, 130, 131, 141, 143, 144, 148, 149]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VACUUM_(self):
            return self.getToken(SQLiteParser.VACUUM_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def INTO_(self):
            return self.getToken(SQLiteParser.INTO_, 0)

        def filename(self):
            return self.getTypedRuleContext(SQLiteParser.FilenameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)




    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_vacuum_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1653
            self.match(SQLiteParser.VACUUM_)
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 1654
                self.schema_name()


            self.state = 1659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 1657
                self.match(SQLiteParser.INTO_)
                self.state = 1658
                self.filename()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER_(self):
            return self.getToken(SQLiteParser.FILTER_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_filter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_clause" ):
                listener.enterFilter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_clause" ):
                listener.exitFilter_clause(self)




    def filter_clause(self):

        localctx = SQLiteParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self.match(SQLiteParser.FILTER_)
            self.state = 1662
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1663
            self.match(SQLiteParser.WHERE_)
            self.state = 1664
            self.expr(0)
            self.state = 1665
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY_)
            else:
                return self.getToken(SQLiteParser.BY_, i)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_defn" ):
                listener.enterWindow_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_defn" ):
                listener.exitWindow_defn(self)




    def window_defn(self):

        localctx = SQLiteParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_window_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 1668
                self.base_window_name()


            self.state = 1681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1671
                self.match(SQLiteParser.PARTITION_)
                self.state = 1672
                self.match(SQLiteParser.BY_)
                self.state = 1673
                self.expr(0)
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1674
                    self.match(SQLiteParser.COMMA)
                    self.state = 1675
                    self.expr(0)
                    self.state = 1680
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1683
            self.match(SQLiteParser.ORDER_)
            self.state = 1684
            self.match(SQLiteParser.BY_)
            self.state = 1685
            self.ordering_term()
            self.state = 1690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1686
                self.match(SQLiteParser.COMMA)
                self.state = 1687
                self.ordering_term()
                self.state = 1692
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2251799880794113) != 0:
                self.state = 1693
                self.frame_spec()


            self.state = 1696
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY_)
            else:
                return self.getToken(SQLiteParser.BY_, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = SQLiteParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            self.match(SQLiteParser.OVER_)
            self.state = 1732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 1699
                self.window_name()
                pass

            elif la_ == 2:
                self.state = 1700
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1702
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 1701
                    self.base_window_name()


                self.state = 1714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1704
                    self.match(SQLiteParser.PARTITION_)
                    self.state = 1705
                    self.match(SQLiteParser.BY_)
                    self.state = 1706
                    self.expr(0)
                    self.state = 1711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1707
                        self.match(SQLiteParser.COMMA)
                        self.state = 1708
                        self.expr(0)
                        self.state = 1713
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109:
                    self.state = 1716
                    self.match(SQLiteParser.ORDER_)
                    self.state = 1717
                    self.match(SQLiteParser.BY_)
                    self.state = 1718
                    self.ordering_term()
                    self.state = 1723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1719
                        self.match(SQLiteParser.COMMA)
                        self.state = 1720
                        self.ordering_term()
                        self.state = 1725
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2251799880794113) != 0:
                    self.state = 1728
                    self.frame_spec()


                self.state = 1731
                self.match(SQLiteParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def EXCLUDE_(self):
            return self.getToken(SQLiteParser.EXCLUDE_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def GROUP_(self):
            return self.getToken(SQLiteParser.GROUP_, 0)

        def TIES_(self):
            return self.getToken(SQLiteParser.TIES_, 0)

        def NO_(self):
            return self.getToken(SQLiteParser.NO_, 0)

        def OTHERS_(self):
            return self.getToken(SQLiteParser.OTHERS_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_spec" ):
                listener.enterFrame_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_spec" ):
                listener.exitFrame_spec(self)




    def frame_spec(self):

        localctx = SQLiteParser.Frame_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_frame_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self.frame_clause()
            self.state = 1742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180]:
                self.state = 1735
                self.match(SQLiteParser.EXCLUDE_)

                self.state = 1736
                self.match(SQLiteParser.NO_)
                self.state = 1737
                self.match(SQLiteParser.OTHERS_)
                pass
            elif token in [157]:
                self.state = 1738
                self.match(SQLiteParser.CURRENT_)
                self.state = 1739
                self.match(SQLiteParser.ROW_)
                pass
            elif token in [78]:
                self.state = 1740
                self.match(SQLiteParser.GROUP_)
                pass
            elif token in [181]:
                self.state = 1741
                self.match(SQLiteParser.TIES_)
                pass
            elif token in [4]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE_(self):
            return self.getToken(SQLiteParser.RANGE_, 0)

        def ROWS_(self):
            return self.getToken(SQLiteParser.ROWS_, 0)

        def GROUPS_(self):
            return self.getToken(SQLiteParser.GROUPS_, 0)

        def frame_single(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_singleContext,0)


        def BETWEEN_(self):
            return self.getToken(SQLiteParser.BETWEEN_, 0)

        def frame_left(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_leftContext,0)


        def AND_(self):
            return self.getToken(SQLiteParser.AND_, 0)

        def frame_right(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_rightContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_clause" ):
                listener.enterFrame_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_clause" ):
                listener.exitFrame_clause(self)




    def frame_clause(self):

        localctx = SQLiteParser.Frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_frame_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1744
            _la = self._input.LA(1)
            if not((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2251799880794113) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.state = 1745
                self.frame_single()
                pass

            elif la_ == 2:
                self.state = 1746
                self.match(SQLiteParser.BETWEEN_)
                self.state = 1747
                self.frame_left()
                self.state = 1748
                self.match(SQLiteParser.AND_)
                self.state = 1749
                self.frame_right()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_func(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_function_invocation" ):
                listener.enterSimple_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_function_invocation" ):
                listener.exitSimple_function_invocation(self)




    def simple_function_invocation(self):

        localctx = SQLiteParser.Simple_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_simple_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1753
            self.simple_func()
            self.state = 1754
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1764
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 8, 9, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 186, 187, 188, 189]:
                self.state = 1755
                self.expr(0)
                self.state = 1760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1756
                    self.match(SQLiteParser.COMMA)
                    self.state = 1757
                    self.expr(0)
                    self.state = 1762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [7]:
                self.state = 1763
                self.match(SQLiteParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1766
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_func(self):
            return self.getTypedRuleContext(SQLiteParser.Aggregate_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_invocation" ):
                listener.enterAggregate_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_invocation" ):
                listener.exitAggregate_function_invocation(self)




    def aggregate_function_invocation(self):

        localctx = SQLiteParser.Aggregate_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_aggregate_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            self.aggregate_func()
            self.state = 1769
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1782
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 8, 9, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 186, 187, 188, 189]:
                self.state = 1771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                if la_ == 1:
                    self.state = 1770
                    self.match(SQLiteParser.DISTINCT_)


                self.state = 1773
                self.expr(0)
                self.state = 1778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1774
                    self.match(SQLiteParser.COMMA)
                    self.state = 1775
                    self.expr(0)
                    self.state = 1780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [7]:
                self.state = 1781
                self.match(SQLiteParser.STAR)
                pass
            elif token in [4]:
                pass
            else:
                pass
            self.state = 1784
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 1785
                self.filter_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_function(self):
            return self.getTypedRuleContext(SQLiteParser.Window_functionContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def window_defn(self):
            return self.getTypedRuleContext(SQLiteParser.Window_defnContext,0)


        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function_invocation" ):
                listener.enterWindow_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function_invocation" ):
                listener.exitWindow_function_invocation(self)




    def window_function_invocation(self):

        localctx = SQLiteParser.Window_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_window_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1788
            self.window_function()
            self.state = 1789
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 8, 9, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 186, 187, 188, 189]:
                self.state = 1790
                self.expr(0)
                self.state = 1795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1791
                    self.match(SQLiteParser.COMMA)
                    self.state = 1792
                    self.expr(0)
                    self.state = 1797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [7]:
                self.state = 1798
                self.match(SQLiteParser.STAR)
                pass
            elif token in [4]:
                pass
            else:
                pass
            self.state = 1801
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 1802
                self.filter_clause()


            self.state = 1805
            self.match(SQLiteParser.OVER_)
            self.state = 1808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.state = 1806
                self.window_defn()
                pass

            elif la_ == 2:
                self.state = 1807
                self.window_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(SQLiteParser.WITH_, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def RECURSIVE_(self):
            return self.getToken(SQLiteParser.RECURSIVE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_stmt" ):
                listener.enterCommon_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_stmt" ):
                listener.exitCommon_table_stmt(self)




    def common_table_stmt(self):

        localctx = SQLiteParser.Common_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_common_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1810
            self.match(SQLiteParser.WITH_)
            self.state = 1812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.state = 1811
                self.match(SQLiteParser.RECURSIVE_)


            self.state = 1814
            self.common_table_expression()
            self.state = 1819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1815
                self.match(SQLiteParser.COMMA)
                self.state = 1816
                self.common_table_expression()
                self.state = 1821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_stmt" ):
                listener.enterOrder_by_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_stmt" ):
                listener.exitOrder_by_stmt(self)




    def order_by_stmt(self):

        localctx = SQLiteParser.Order_by_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_order_by_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1822
            self.match(SQLiteParser.ORDER_)
            self.state = 1823
            self.match(SQLiteParser.BY_)
            self.state = 1824
            self.ordering_term()
            self.state = 1829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1825
                self.match(SQLiteParser.COMMA)
                self.state = 1826
                self.ordering_term()
                self.state = 1831
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_(self):
            return self.getToken(SQLiteParser.LIMIT_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def OFFSET_(self):
            return self.getToken(SQLiteParser.OFFSET_, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_limit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_stmt" ):
                listener.enterLimit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_stmt" ):
                listener.exitLimit_stmt(self)




    def limit_stmt(self):

        localctx = SQLiteParser.Limit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_limit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            self.match(SQLiteParser.LIMIT_)
            self.state = 1833
            self.expr(0)
            self.state = 1836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5 or _la==106:
                self.state = 1834
                _la = self._input.LA(1)
                if not(_la==5 or _la==106):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1835
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def NULLS_(self):
            return self.getToken(SQLiteParser.NULLS_, 0)

        def FIRST_(self):
            return self.getToken(SQLiteParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(SQLiteParser.LAST_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            self.expr(0)
            self.state = 1841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 1839
                self.match(SQLiteParser.COLLATE_)
                self.state = 1840
                self.collation_name()


            self.state = 1844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==60:
                self.state = 1843
                self.asc_desc()


            self.state = 1848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==175:
                self.state = 1846
                self.match(SQLiteParser.NULLS_)
                self.state = 1847
                _la = self._input.LA(1)
                if not(_la==176 or _la==177):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC_(self):
            return self.getToken(SQLiteParser.ASC_, 0)

        def DESC_(self):
            return self.getToken(SQLiteParser.DESC_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc" ):
                listener.enterAsc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc" ):
                listener.exitAsc_desc(self)




    def asc_desc(self):

        localctx = SQLiteParser.Asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1850
            _la = self._input.LA(1)
            if not(_la==34 or _la==60):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_leftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def FOLLOWING_(self):
            return self.getToken(SQLiteParser.FOLLOWING_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_left

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_left" ):
                listener.enterFrame_left(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_left" ):
                listener.exitFrame_left(self)




    def frame_left(self):

        localctx = SQLiteParser.Frame_leftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_frame_left)
        try:
            self.state = 1862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1852
                self.expr(0)
                self.state = 1853
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1855
                self.expr(0)
                self.state = 1856
                self.match(SQLiteParser.FOLLOWING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1858
                self.match(SQLiteParser.CURRENT_)
                self.state = 1859
                self.match(SQLiteParser.ROW_)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1860
                self.match(SQLiteParser.UNBOUNDED_)
                self.state = 1861
                self.match(SQLiteParser.PRECEDING_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_rightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def FOLLOWING_(self):
            return self.getToken(SQLiteParser.FOLLOWING_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_right

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_right" ):
                listener.enterFrame_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_right" ):
                listener.exitFrame_right(self)




    def frame_right(self):

        localctx = SQLiteParser.Frame_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_frame_right)
        try:
            self.state = 1874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1864
                self.expr(0)
                self.state = 1865
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1867
                self.expr(0)
                self.state = 1868
                self.match(SQLiteParser.FOLLOWING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1870
                self.match(SQLiteParser.CURRENT_)
                self.state = 1871
                self.match(SQLiteParser.ROW_)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1872
                self.match(SQLiteParser.UNBOUNDED_)
                self.state = 1873
                self.match(SQLiteParser.FOLLOWING_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_single" ):
                listener.enterFrame_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_single" ):
                listener.exitFrame_single(self)




    def frame_single(self):

        localctx = SQLiteParser.Frame_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_frame_single)
        try:
            self.state = 1883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1876
                self.expr(0)
                self.state = 1877
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1879
                self.match(SQLiteParser.UNBOUNDED_)
                self.state = 1880
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1881
                self.match(SQLiteParser.CURRENT_)
                self.state = 1882
                self.match(SQLiteParser.ROW_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_expr_asc_descContext,0)


        def FIRST_VALUE_(self):
            return self.getToken(SQLiteParser.FIRST_VALUE_, 0)

        def LAST_VALUE_(self):
            return self.getToken(SQLiteParser.LAST_VALUE_, 0)

        def partition_by(self):
            return self.getTypedRuleContext(SQLiteParser.Partition_byContext,0)


        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def CUME_DIST_(self):
            return self.getToken(SQLiteParser.CUME_DIST_, 0)

        def PERCENT_RANK_(self):
            return self.getToken(SQLiteParser.PERCENT_RANK_, 0)

        def order_by_expr(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_exprContext,0)


        def DENSE_RANK_(self):
            return self.getToken(SQLiteParser.DENSE_RANK_, 0)

        def RANK_(self):
            return self.getToken(SQLiteParser.RANK_, 0)

        def ROW_NUMBER_(self):
            return self.getToken(SQLiteParser.ROW_NUMBER_, 0)

        def LAG_(self):
            return self.getToken(SQLiteParser.LAG_, 0)

        def LEAD_(self):
            return self.getToken(SQLiteParser.LEAD_, 0)

        def offset(self):
            return self.getTypedRuleContext(SQLiteParser.OffsetContext,0)


        def default_value(self):
            return self.getTypedRuleContext(SQLiteParser.Default_valueContext,0)


        def NTH_VALUE_(self):
            return self.getToken(SQLiteParser.NTH_VALUE_, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def NTILE_(self):
            return self.getToken(SQLiteParser.NTILE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function" ):
                listener.enterWindow_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function" ):
                listener.exitWindow_function(self)




    def window_function(self):

        localctx = SQLiteParser.Window_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_window_function)
        self._la = 0 # Token type
        try:
            self.state = 1970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151, 162]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1885
                _la = self._input.LA(1)
                if not(_la==151 or _la==162):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1886
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1887
                self.expr(0)
                self.state = 1888
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1889
                self.match(SQLiteParser.OVER_)
                self.state = 1890
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1891
                    self.partition_by()


                self.state = 1894
                self.order_by_expr_asc_desc()
                self.state = 1896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2251799880794113) != 0:
                    self.state = 1895
                    self.frame_clause()


                self.state = 1898
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [159, 166]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1900
                _la = self._input.LA(1)
                if not(_la==159 or _la==166):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1901
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1902
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1903
                self.match(SQLiteParser.OVER_)
                self.state = 1904
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1905
                    self.partition_by()


                self.state = 1909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109:
                    self.state = 1908
                    self.order_by_expr()


                self.state = 1911
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [160, 167, 168]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1912
                _la = self._input.LA(1)
                if not((((_la - 160)) & ~0x3f) == 0 and ((1 << (_la - 160)) & 385) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1913
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1914
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1915
                self.match(SQLiteParser.OVER_)
                self.state = 1916
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1917
                    self.partition_by()


                self.state = 1920
                self.order_by_expr_asc_desc()
                self.state = 1921
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [161, 163]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1923
                _la = self._input.LA(1)
                if not(_la==161 or _la==163):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1924
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1925
                self.expr(0)
                self.state = 1927
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 1926
                    self.offset()


                self.state = 1930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 1929
                    self.default_value()


                self.state = 1932
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1933
                self.match(SQLiteParser.OVER_)
                self.state = 1934
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1935
                    self.partition_by()


                self.state = 1938
                self.order_by_expr_asc_desc()
                self.state = 1939
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1941
                self.match(SQLiteParser.NTH_VALUE_)
                self.state = 1942
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1943
                self.expr(0)
                self.state = 1944
                self.match(SQLiteParser.COMMA)
                self.state = 1945
                self.signed_number()
                self.state = 1946
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1947
                self.match(SQLiteParser.OVER_)
                self.state = 1948
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1949
                    self.partition_by()


                self.state = 1952
                self.order_by_expr_asc_desc()
                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 2251799880794113) != 0:
                    self.state = 1953
                    self.frame_clause()


                self.state = 1956
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1958
                self.match(SQLiteParser.NTILE_)
                self.state = 1959
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1960
                self.expr(0)
                self.state = 1961
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1962
                self.match(SQLiteParser.OVER_)
                self.state = 1963
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1964
                    self.partition_by()


                self.state = 1967
                self.order_by_expr_asc_desc()
                self.state = 1968
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = SQLiteParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1972
            self.match(SQLiteParser.COMMA)
            self.state = 1973
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = SQLiteParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_default_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1975
            self.match(SQLiteParser.COMMA)
            self.state = 1976
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by" ):
                listener.enterPartition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by" ):
                listener.exitPartition_by(self)




    def partition_by(self):

        localctx = SQLiteParser.Partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_partition_by)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            self.match(SQLiteParser.PARTITION_)
            self.state = 1979
            self.match(SQLiteParser.BY_)
            self.state = 1981 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1980
                    self.expr(0)

                else:
                    raise NoViableAltException(self)
                self.state = 1983 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr" ):
                listener.enterOrder_by_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr" ):
                listener.exitOrder_by_expr(self)




    def order_by_expr(self):

        localctx = SQLiteParser.Order_by_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_order_by_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985
            self.match(SQLiteParser.ORDER_)
            self.state = 1986
            self.match(SQLiteParser.BY_)
            self.state = 1988 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1987
                self.expr(0)
                self.state = 1990 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((_la) & ~0x3f) == 0 and ((1 << _la) & -33552632) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921504606846977) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4476578029606273023) != 0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Expr_asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr_asc_desc" ):
                listener.enterOrder_by_expr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr_asc_desc" ):
                listener.exitOrder_by_expr_asc_desc(self)




    def order_by_expr_asc_desc(self):

        localctx = SQLiteParser.Order_by_expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_order_by_expr_asc_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            self.match(SQLiteParser.ORDER_)
            self.state = 1993
            self.match(SQLiteParser.BY_)
            self.state = 1994
            self.expr_asc_desc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def asc_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Asc_descContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Asc_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_asc_desc" ):
                listener.enterExpr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_asc_desc" ):
                listener.exitExpr_asc_desc(self)




    def expr_asc_desc(self):

        localctx = SQLiteParser.Expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_expr_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self.expr(0)
            self.state = 1998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==60:
                self.state = 1997
                self.asc_desc()


            self.state = 2007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2000
                self.match(SQLiteParser.COMMA)
                self.state = 2001
                self.expr(0)
                self.state = 2003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34 or _la==60:
                    self.state = 2002
                    self.asc_desc()


                self.state = 2009
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initial_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_initial_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial_select" ):
                listener.enterInitial_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial_select" ):
                listener.exitInitial_select(self)




    def initial_select(self):

        localctx = SQLiteParser.Initial_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_initial_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2010
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_select" ):
                listener.enterRecursive_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_select" ):
                listener.exitRecursive_select(self)




    def recursive_select(self):

        localctx = SQLiteParser.Recursive_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_recursive_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2012
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SQLiteParser.TILDE, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 1792) != 0 or _la==102):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_messageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_message" ):
                listener.enterError_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_message" ):
                listener.exitError_message(self)




    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_argument" ):
                listener.enterModule_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_argument" ):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = SQLiteParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_module_argument)
        try:
            self.state = 2020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2018
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2019
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            _la = self._input.LA(1)
            if not(_la==185 or _la==188):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def ACTION_(self):
            return self.getToken(SQLiteParser.ACTION_, 0)

        def ADD_(self):
            return self.getToken(SQLiteParser.ADD_, 0)

        def AFTER_(self):
            return self.getToken(SQLiteParser.AFTER_, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def ALTER_(self):
            return self.getToken(SQLiteParser.ALTER_, 0)

        def ANALYZE_(self):
            return self.getToken(SQLiteParser.ANALYZE_, 0)

        def AND_(self):
            return self.getToken(SQLiteParser.AND_, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def ASC_(self):
            return self.getToken(SQLiteParser.ASC_, 0)

        def ATTACH_(self):
            return self.getToken(SQLiteParser.ATTACH_, 0)

        def AUTOINCREMENT_(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT_, 0)

        def BEFORE_(self):
            return self.getToken(SQLiteParser.BEFORE_, 0)

        def BEGIN_(self):
            return self.getToken(SQLiteParser.BEGIN_, 0)

        def BETWEEN_(self):
            return self.getToken(SQLiteParser.BETWEEN_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def CASCADE_(self):
            return self.getToken(SQLiteParser.CASCADE_, 0)

        def CASE_(self):
            return self.getToken(SQLiteParser.CASE_, 0)

        def CAST_(self):
            return self.getToken(SQLiteParser.CAST_, 0)

        def CHECK_(self):
            return self.getToken(SQLiteParser.CHECK_, 0)

        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def COLUMN_(self):
            return self.getToken(SQLiteParser.COLUMN_, 0)

        def COMMIT_(self):
            return self.getToken(SQLiteParser.COMMIT_, 0)

        def CONFLICT_(self):
            return self.getToken(SQLiteParser.CONFLICT_, 0)

        def CONSTRAINT_(self):
            return self.getToken(SQLiteParser.CONSTRAINT_, 0)

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def CROSS_(self):
            return self.getToken(SQLiteParser.CROSS_, 0)

        def CURRENT_DATE_(self):
            return self.getToken(SQLiteParser.CURRENT_DATE_, 0)

        def CURRENT_TIME_(self):
            return self.getToken(SQLiteParser.CURRENT_TIME_, 0)

        def CURRENT_TIMESTAMP_(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0)

        def DATABASE_(self):
            return self.getToken(SQLiteParser.DATABASE_, 0)

        def DEFAULT_(self):
            return self.getToken(SQLiteParser.DEFAULT_, 0)

        def DEFERRABLE_(self):
            return self.getToken(SQLiteParser.DEFERRABLE_, 0)

        def DEFERRED_(self):
            return self.getToken(SQLiteParser.DEFERRED_, 0)

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def DESC_(self):
            return self.getToken(SQLiteParser.DESC_, 0)

        def DETACH_(self):
            return self.getToken(SQLiteParser.DETACH_, 0)

        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def DROP_(self):
            return self.getToken(SQLiteParser.DROP_, 0)

        def EACH_(self):
            return self.getToken(SQLiteParser.EACH_, 0)

        def ELSE_(self):
            return self.getToken(SQLiteParser.ELSE_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def ESCAPE_(self):
            return self.getToken(SQLiteParser.ESCAPE_, 0)

        def EXCEPT_(self):
            return self.getToken(SQLiteParser.EXCEPT_, 0)

        def EXCLUSIVE_(self):
            return self.getToken(SQLiteParser.EXCLUSIVE_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def EXPLAIN_(self):
            return self.getToken(SQLiteParser.EXPLAIN_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def FOR_(self):
            return self.getToken(SQLiteParser.FOR_, 0)

        def FOREIGN_(self):
            return self.getToken(SQLiteParser.FOREIGN_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def FULL_(self):
            return self.getToken(SQLiteParser.FULL_, 0)

        def GLOB_(self):
            return self.getToken(SQLiteParser.GLOB_, 0)

        def GROUP_(self):
            return self.getToken(SQLiteParser.GROUP_, 0)

        def HAVING_(self):
            return self.getToken(SQLiteParser.HAVING_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def IMMEDIATE_(self):
            return self.getToken(SQLiteParser.IMMEDIATE_, 0)

        def IN_(self):
            return self.getToken(SQLiteParser.IN_, 0)

        def INDEX_(self):
            return self.getToken(SQLiteParser.INDEX_, 0)

        def INDEXED_(self):
            return self.getToken(SQLiteParser.INDEXED_, 0)

        def INITIALLY_(self):
            return self.getToken(SQLiteParser.INITIALLY_, 0)

        def INNER_(self):
            return self.getToken(SQLiteParser.INNER_, 0)

        def INSERT_(self):
            return self.getToken(SQLiteParser.INSERT_, 0)

        def INSTEAD_(self):
            return self.getToken(SQLiteParser.INSTEAD_, 0)

        def INTERSECT_(self):
            return self.getToken(SQLiteParser.INTERSECT_, 0)

        def INTO_(self):
            return self.getToken(SQLiteParser.INTO_, 0)

        def IS_(self):
            return self.getToken(SQLiteParser.IS_, 0)

        def ISNULL_(self):
            return self.getToken(SQLiteParser.ISNULL_, 0)

        def JOIN_(self):
            return self.getToken(SQLiteParser.JOIN_, 0)

        def KEY_(self):
            return self.getToken(SQLiteParser.KEY_, 0)

        def LEFT_(self):
            return self.getToken(SQLiteParser.LEFT_, 0)

        def LIKE_(self):
            return self.getToken(SQLiteParser.LIKE_, 0)

        def LIMIT_(self):
            return self.getToken(SQLiteParser.LIMIT_, 0)

        def MATCH_(self):
            return self.getToken(SQLiteParser.MATCH_, 0)

        def NATURAL_(self):
            return self.getToken(SQLiteParser.NATURAL_, 0)

        def NO_(self):
            return self.getToken(SQLiteParser.NO_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def NOTNULL_(self):
            return self.getToken(SQLiteParser.NOTNULL_, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def OF_(self):
            return self.getToken(SQLiteParser.OF_, 0)

        def OFFSET_(self):
            return self.getToken(SQLiteParser.OFFSET_, 0)

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def OUTER_(self):
            return self.getToken(SQLiteParser.OUTER_, 0)

        def PLAN_(self):
            return self.getToken(SQLiteParser.PLAN_, 0)

        def PRAGMA_(self):
            return self.getToken(SQLiteParser.PRAGMA_, 0)

        def PRIMARY_(self):
            return self.getToken(SQLiteParser.PRIMARY_, 0)

        def QUERY_(self):
            return self.getToken(SQLiteParser.QUERY_, 0)

        def RAISE_(self):
            return self.getToken(SQLiteParser.RAISE_, 0)

        def RECURSIVE_(self):
            return self.getToken(SQLiteParser.RECURSIVE_, 0)

        def REFERENCES_(self):
            return self.getToken(SQLiteParser.REFERENCES_, 0)

        def REGEXP_(self):
            return self.getToken(SQLiteParser.REGEXP_, 0)

        def REINDEX_(self):
            return self.getToken(SQLiteParser.REINDEX_, 0)

        def RELEASE_(self):
            return self.getToken(SQLiteParser.RELEASE_, 0)

        def RENAME_(self):
            return self.getToken(SQLiteParser.RENAME_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def RESTRICT_(self):
            return self.getToken(SQLiteParser.RESTRICT_, 0)

        def RIGHT_(self):
            return self.getToken(SQLiteParser.RIGHT_, 0)

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def ROWS_(self):
            return self.getToken(SQLiteParser.ROWS_, 0)

        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def SELECT_(self):
            return self.getToken(SQLiteParser.SELECT_, 0)

        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def THEN_(self):
            return self.getToken(SQLiteParser.THEN_, 0)

        def TO_(self):
            return self.getToken(SQLiteParser.TO_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def TRIGGER_(self):
            return self.getToken(SQLiteParser.TRIGGER_, 0)

        def UNION_(self):
            return self.getToken(SQLiteParser.UNION_, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def USING_(self):
            return self.getToken(SQLiteParser.USING_, 0)

        def VACUUM_(self):
            return self.getToken(SQLiteParser.VACUUM_, 0)

        def VALUES_(self):
            return self.getToken(SQLiteParser.VALUES_, 0)

        def VIEW_(self):
            return self.getToken(SQLiteParser.VIEW_, 0)

        def VIRTUAL_(self):
            return self.getToken(SQLiteParser.VIRTUAL_, 0)

        def WHEN_(self):
            return self.getToken(SQLiteParser.WHEN_, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def WITH_(self):
            return self.getToken(SQLiteParser.WITH_, 0)

        def WITHOUT_(self):
            return self.getToken(SQLiteParser.WITHOUT_, 0)

        def FIRST_VALUE_(self):
            return self.getToken(SQLiteParser.FIRST_VALUE_, 0)

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def RANGE_(self):
            return self.getToken(SQLiteParser.RANGE_, 0)

        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def FOLLOWING_(self):
            return self.getToken(SQLiteParser.FOLLOWING_, 0)

        def CUME_DIST_(self):
            return self.getToken(SQLiteParser.CUME_DIST_, 0)

        def DENSE_RANK_(self):
            return self.getToken(SQLiteParser.DENSE_RANK_, 0)

        def LAG_(self):
            return self.getToken(SQLiteParser.LAG_, 0)

        def LAST_VALUE_(self):
            return self.getToken(SQLiteParser.LAST_VALUE_, 0)

        def LEAD_(self):
            return self.getToken(SQLiteParser.LEAD_, 0)

        def NTH_VALUE_(self):
            return self.getToken(SQLiteParser.NTH_VALUE_, 0)

        def NTILE_(self):
            return self.getToken(SQLiteParser.NTILE_, 0)

        def PERCENT_RANK_(self):
            return self.getToken(SQLiteParser.PERCENT_RANK_, 0)

        def RANK_(self):
            return self.getToken(SQLiteParser.RANK_, 0)

        def ROW_NUMBER_(self):
            return self.getToken(SQLiteParser.ROW_NUMBER_, 0)

        def GENERATED_(self):
            return self.getToken(SQLiteParser.GENERATED_, 0)

        def ALWAYS_(self):
            return self.getToken(SQLiteParser.ALWAYS_, 0)

        def STORED_(self):
            return self.getToken(SQLiteParser.STORED_, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def WINDOW_(self):
            return self.getToken(SQLiteParser.WINDOW_, 0)

        def NULLS_(self):
            return self.getToken(SQLiteParser.NULLS_, 0)

        def FIRST_(self):
            return self.getToken(SQLiteParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(SQLiteParser.LAST_, 0)

        def FILTER_(self):
            return self.getToken(SQLiteParser.FILTER_, 0)

        def GROUPS_(self):
            return self.getToken(SQLiteParser.GROUPS_, 0)

        def EXCLUDE_(self):
            return self.getToken(SQLiteParser.EXCLUDE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & -33554432) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1152921504606846977) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 9007199254740991) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = SQLiteParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_index_name" ):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_index_name" ):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2036
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = SQLiteParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2040
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2042
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = SQLiteParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2044
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = SQLiteParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2046
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_name" ):
                listener.enterModule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_name" ):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = SQLiteParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2048
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_name" ):
                listener.enterPragma_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_name" ):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2050
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2052
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2054
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_name" ):
                listener.enterTransaction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_name" ):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2056
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_name" ):
                listener.enterWindow_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_name" ):
                listener.exitWindow_name(self)




    def window_name(self):

        localctx = SQLiteParser.Window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2058
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = SQLiteParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2060
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_filename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilename" ):
                listener.enterFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilename" ):
                listener.exitFilename(self)




    def filename(self):

        localctx = SQLiteParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_base_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_window_name" ):
                listener.enterBase_window_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_window_name" ):
                listener.exitBase_window_name(self)




    def base_window_name(self):

        localctx = SQLiteParser.Base_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_base_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2064
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_func" ):
                listener.enterSimple_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_func" ):
                listener.exitSimple_func(self)




    def simple_func(self):

        localctx = SQLiteParser.Simple_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_simple_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2066
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_func" ):
                listener.enterAggregate_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_func" ):
                listener.exitAggregate_func(self)




    def aggregate_func(self):

        localctx = SQLiteParser.Aggregate_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_aggregate_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2068
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)




    def table_function_name(self):

        localctx = SQLiteParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2070
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_any_name)
        try:
            self.state = 2079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [185]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2072
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2073
                self.keyword()
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2074
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2075
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 2076
                self.any_name()
                self.state = 2077
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




